<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tomcat设计模式 - Reactor模型</title>
      <link href="/2022/08/18/Tomcat%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/18/Tomcat%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="Tomcat启动流程"><a href="#Tomcat启动流程" class="headerlink" title="Tomcat启动流程"></a>Tomcat启动流程</h2><h3 id="Tomcat启动命令"><a href="#Tomcat启动命令" class="headerlink" title="Tomcat启动命令"></a>Tomcat启动命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh </span><br></pre></td></tr></table></figure><p>查看<code>startup.sh</code>脚本内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; startup.sh</span></span><br><span class="line">PRGDIR=`dirname &quot;$PRG&quot;`</span><br><span class="line">EXECUTABLE=catalina.sh</span><br><span class="line">...</span><br><span class="line">exec &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; start &quot;$@&quot;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>所以实际启动命令为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./catalina.sh start</span><br></pre></td></tr></table></figure><p>查看<code>catalina.sh</code>脚本内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">elif [ &quot;$1&quot; = &quot;start&quot; ] ; then</span><br><span class="line">...</span><br><span class="line">if [ &quot;$1&quot; = &quot;-security&quot; ] ; then</span><br><span class="line">    if [ $have_tty -eq 1 ]; then</span><br><span class="line">      echo &quot;Using Security Manager&quot;</span><br><span class="line">    fi</span><br><span class="line">    shift</span><br><span class="line">    eval $_NOHUP &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$CATALINA_LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER &quot;$JAVA_OPTS&quot; &quot;$CATALINA_OPTS&quot; \</span><br><span class="line">      -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">      -Djava.security.manager \</span><br><span class="line">      -Djava.security.policy==&quot;\&quot;$CATALINA_BASE/conf/catalina.policy\&quot;&quot; \</span><br><span class="line">      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">      -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \</span><br><span class="line">      &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;</span><br><span class="line">  else</span><br><span class="line">    eval $_NOHUP &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$CATALINA_LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER &quot;$JAVA_OPTS&quot; &quot;$CATALINA_OPTS&quot; \</span><br><span class="line">      -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">      -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \</span><br><span class="line">      &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;</span><br><span class="line"></span><br><span class="line">  fi</span><br></pre></td></tr></table></figure><p>通过查看<code>catalina.sh</code>脚本内容可知不启用 SecurityManager时Tomcat启动命令实际为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eval $_NOHUP &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$CATALINA_LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER &quot;$JAVA_OPTS&quot; &quot;$CATALINA_OPTS&quot; \</span><br><span class="line">      -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">      -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \</span><br><span class="line">      &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;</span><br></pre></td></tr></table></figure><h3 id="入口类"><a href="#入口类" class="headerlink" title="入口类"></a>入口类</h3><p>启动类为：<code>org.apache.catalina.startup.Bootstrap#main</code>方法<code>arg[]-&gt;&#123;start&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object daemonLock = <span class="keyword">new</span> Object();</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 设置初始属性（基本都是在定位tomcat目录）</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// Will always be non-null</span></span><br><span class="line">        String userDir = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Home first</span></span><br><span class="line">        String home = System.getProperty(Constants.CATALINA_HOME_PROP);</span><br><span class="line">        File homeFile = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (home != <span class="keyword">null</span>) &#123;</span><br><span class="line">            File f = <span class="keyword">new</span> File(home);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                homeFile = f.getCanonicalFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                homeFile = f.getAbsoluteFile();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (homeFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// First fall-back. See if current directory is a bin directory</span></span><br><span class="line">            <span class="comment">// in a normal Tomcat install</span></span><br><span class="line">            File bootstrapJar = <span class="keyword">new</span> File(userDir, <span class="string">&quot;bootstrap.jar&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bootstrapJar.exists()) &#123;</span><br><span class="line">                File f = <span class="keyword">new</span> File(userDir, <span class="string">&quot;..&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    homeFile = f.getCanonicalFile();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                    homeFile = f.getAbsoluteFile();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (homeFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Second fall-back. Use current directory</span></span><br><span class="line">            File f = <span class="keyword">new</span> File(userDir);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                homeFile = f.getCanonicalFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                homeFile = f.getAbsoluteFile();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        catalinaHomeFile = homeFile;</span><br><span class="line">        System.setProperty(</span><br><span class="line">                Constants.CATALINA_HOME_PROP, catalinaHomeFile.getPath());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Then base</span></span><br><span class="line">        String base = System.getProperty(Constants.CATALINA_BASE_PROP);</span><br><span class="line">        <span class="keyword">if</span> (base == <span class="keyword">null</span>) &#123;</span><br><span class="line">            catalinaBaseFile = catalinaHomeFile;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            File baseFile = <span class="keyword">new</span> File(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                baseFile = baseFile.getCanonicalFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                baseFile = baseFile.getAbsoluteFile();</span><br><span class="line">            &#125;</span><br><span class="line">            catalinaBaseFile = baseFile;</span><br><span class="line">        &#125;</span><br><span class="line">        System.setProperty(</span><br><span class="line">                Constants.CATALINA_BASE_PROP, catalinaBaseFile.getPath());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="comment">// 同步块，保障Bootstrap仅初始一次</span></span><br><span class="line">        <span class="keyword">synchronized</span> (daemonLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (daemon == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Don&#x27;t set daemon until init() has completed</span></span><br><span class="line">                Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Bootstrap初始化</span></span><br><span class="line">                    bootstrap.init();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    handleThrowable(t);</span><br><span class="line">                    t.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                daemon = bootstrap;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// When running as a service the call to stop will be on a new</span></span><br><span class="line">                <span class="comment">// thread so make sure the correct class loader is used to</span></span><br><span class="line">                <span class="comment">// prevent a range of class not found exceptions.</span></span><br><span class="line">                Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String command = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                command = args[args.length - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (command.equals(<span class="string">&quot;startd&quot;</span>)) &#123;</span><br><span class="line">                args[args.length - <span class="number">1</span>] = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">                daemon.load(args);</span><br><span class="line">                daemon.start();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">&quot;stopd&quot;</span>)) &#123;</span><br><span class="line">                args[args.length - <span class="number">1</span>] = <span class="string">&quot;stop&quot;</span>;</span><br><span class="line">                daemon.stop();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">&quot;start&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// Bootstrap#setAwait</span></span><br><span class="line">                daemon.setAwait(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">// Bootstrap#load</span></span><br><span class="line">                <span class="comment">// Bootstrap#load -&gt; Catalina#load -&gt; Catalina#parseServerXml实现对Server.xml的解析</span></span><br><span class="line">                daemon.load(args);</span><br><span class="line">                <span class="comment">// Bootstrap#start</span></span><br><span class="line">                daemon.start();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == daemon.getServer()) &#123;</span><br><span class="line">                    System.exit(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">&quot;stop&quot;</span>)) &#123;</span><br><span class="line">                daemon.stopServer(args);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">&quot;configtest&quot;</span>)) &#123;</span><br><span class="line">                daemon.load(args);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == daemon.getServer()) &#123;</span><br><span class="line">                    System.exit(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;Bootstrap: command \&quot;&quot;</span> + command + <span class="string">&quot;\&quot; does not exist.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// Unwrap the Exception for clearer error reporting</span></span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> InvocationTargetException &amp;&amp;</span><br><span class="line">                    t.getCause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                t = t.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">            handleThrowable(t);</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Bootstrap-start"><a href="#Bootstrap-start" class="headerlink" title="Bootstrap#start"></a>Bootstrap#start</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 若未init则初始化</span></span><br><span class="line">    <span class="keyword">if</span> (catalinaDaemon == <span class="keyword">null</span>) &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Method method = catalinaDaemon.getClass().getMethod(<span class="string">&quot;start&quot;</span>, (Class [])<span class="keyword">null</span>);</span><br><span class="line">    method.invoke(catalinaDaemon, (Object [])<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Bootstarp#init</code>方法中<code>catalinaDaemon</code>为<code>Catalina</code>类的一个实例，所以在<code>Bootstarp#start</code>方法中实际调用的是<code>Catalina#start</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用server#start</span></span><br><span class="line">            getServer().start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            log.fatal(sm.getString(<span class="string">&quot;catalina.serverStartFail&quot;</span>), e);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                getServer().destroy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e1) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;destroy() failed for failed Server &quot;</span>, e1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类<code>Server</code>是一个接口，他的实现类为<code>StandardServer</code>，<code>Server#start</code>实现方法为<code>StandardServer#startInternal</code></p><h3 id="StandardServer-startInternal"><a href="#StandardServer-startInternal" class="headerlink" title="StandardServer#startInternal"></a>StandardServer#startInternal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    fireLifecycleEvent(CONFIGURE_START_EVENT, <span class="keyword">null</span>);</span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    globalNamingResources.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Services</span></span><br><span class="line">    <span class="keyword">synchronized</span> (servicesLock) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Service service : services) &#123;</span><br><span class="line">            <span class="comment">// 循环启动server.xml中配置的一组service</span></span><br><span class="line">            service.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (periodicEventDelay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        monitorFuture = getUtilityExecutor().scheduleWithFixedDelay(</span><br><span class="line">                () -&gt; startPeriodicLifecycleEvent(), <span class="number">0</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Server</code>启动完成后，调用<code>Service#start</code>，与类<code>Server</code>同理，<code>Service#start</code>实现方法为<code>StandardService#startInternal</code></p><h3 id="StandardService-startInternal"><a href="#StandardService-startInternal" class="headerlink" title="StandardService#startInternal"></a>StandardService#startInternal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(log.isInfoEnabled()) &#123;</span><br><span class="line">        log.info(sm.getString(<span class="string">&quot;standardService.start.name&quot;</span>, <span class="keyword">this</span>.name));</span><br><span class="line">    &#125;</span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Container first</span></span><br><span class="line">    <span class="keyword">if</span> (engine != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (engine) &#123;</span><br><span class="line">            <span class="comment">// 若engine配置不为空，则启动engine</span></span><br><span class="line">            engine.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (executors) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Executor executor: executors) &#123;</span><br><span class="line">            <span class="comment">// 若executor配置不为空，则启动executor</span></span><br><span class="line">            executor.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 启动监听</span></span><br><span class="line">    mapperListener.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Connectors second</span></span><br><span class="line">    <span class="keyword">synchronized</span> (connectorsLock) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Connector connector: connectors) &#123;</span><br><span class="line">            <span class="comment">// If it has already failed, don&#x27;t try and start it</span></span><br><span class="line">            <span class="keyword">if</span> (connector.getState() != LifecycleState.FAILED) &#123;</span><br><span class="line">                <span class="comment">// 启动connector</span></span><br><span class="line">                connector.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StandardService#startInternal</code>方法中核心就是去启动Server.xml中配置的<code>Engine</code>(引擎)、<code>Executor</code>(执行器)、<code>Connector</code>(连接器)，同时启动监听</p><p><code>StandardEngine#startInternal</code>主要就是调用父类去同步启动管道<code>pipeline</code></p><p><code>StandardThreadExecutor#startInternal</code>主要作用为初始化执行器线程池</p><p>至此Tomcat容器基本已经启动完成，同时调用了<code>Connector#start</code>，接下来就到了Tomcat的第二个核心，也是Reacotr模型的所在-<strong>连接器</strong></p><h3 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>在<code>Catalina#parseServerXml</code>方法中会通过解析Server.xml去创建生成对应的容器【网上看到说parseServerXml是通过SAX解析的xml，没深入去了解过】</p><p><img src="C:\Users\Laim\Documents\Connector_new.png"></p><p>由时序图可以看出<code>Connector</code>构造方法去调用<code>ProtocolHandler#create</code>，<code>server.xml</code>中<code>Connector</code>默认配置为<code>&quot;HTTP/1.1&quot;</code>，所以<code>ProtocolHandler#create</code>将会返回一个<code>Http11NioProtocol</code>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Http11NioProtocol#Constructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Http11NioProtocol</span> <span class="keyword">extends</span> <span class="title">AbstractHttp11JsseProtocol</span>&lt;<span class="title">NioChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Http11NioProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> NioEndpoint());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AbstractHttp11JsseProtocol#Constructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHttp11JsseProtocol</span>&lt;<span class="title">S</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractHttp11Protocol</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// endpoint-&gt;new NioEndpoint()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractHttp11JsseProtocol</span><span class="params">(AbstractJsseEndpoint&lt;S,?&gt; endpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(endpoint);</span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br><span class="line"><span class="comment">// AbstractHttp11Protocol#Constructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHttp11Protocol</span>&lt;<span class="title">S</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractProtocol</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractHttp11Protocol</span><span class="params">(AbstractEndpoint&lt;S,?&gt; endpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(endpoint);</span><br><span class="line">        <span class="comment">// 设置连接超时</span></span><br><span class="line">        setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);</span><br><span class="line">        <span class="comment">// 创建&amp;设置连接处理器</span></span><br><span class="line">        ConnectionHandler&lt;S&gt; cHandler = <span class="keyword">new</span> ConnectionHandler&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">        setHandler(cHandler);</span><br><span class="line">        getEndpoint().setHandler(cHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AbstractProtocol#Constructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProtocol</span>&lt;<span class="title">S</span>&gt; <span class="keyword">implements</span> <span class="title">ProtocolHandler</span>, <span class="title">MBeanRegistration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractProtocol</span><span class="params">(AbstractEndpoint&lt;S,?&gt; endpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endpoint = endpoint;</span><br><span class="line">        setConnectionLinger(Constants.DEFAULT_CONNECTION_LINGER);</span><br><span class="line">        setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Connector-startInternal"><a href="#Connector-startInternal" class="headerlink" title="Connector#startInternal"></a>Connector#startInternal</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate settings before starting</span></span><br><span class="line">    String id = (protocolHandler != <span class="keyword">null</span>) ? protocolHandler.getId() : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="keyword">null</span> &amp;&amp; getPortWithOffset() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(</span><br><span class="line">                <span class="string">&quot;coyoteConnector.invalidPort&quot;</span>, Integer.valueOf(getPortWithOffset())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        protocolHandler.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">                sm.getString(<span class="string">&quot;coyoteConnector.protocolHandlerStartFailed&quot;</span>), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AbstractProtocol-start"><a href="#AbstractProtocol-start" class="headerlink" title="AbstractProtocol#start"></a>AbstractProtocol#start</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getLog().isInfoEnabled()) &#123;</span><br><span class="line">        getLog().info(sm.getString(<span class="string">&quot;abstractProtocolHandler.start&quot;</span>, getName()));</span><br><span class="line">        logPortOffset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    endpoint.start();</span><br><span class="line">    monitorFuture = getUtilityExecutor().scheduleWithFixedDelay(</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (!isPaused()) &#123;</span><br><span class="line">                    startAsyncTimeout();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AbstractEndpoint-init"><a href="#AbstractEndpoint-init" class="headerlink" title="AbstractEndpoint#init"></a>AbstractEndpoint#init</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自Bootstarp中调用init初始化方法追溯下来会调用到这个方法，用于初始化ServerSocket</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindOnInit) &#123;</span><br><span class="line">        bindWithCleanup();</span><br><span class="line">        bindState = BindState.BOUND_ON_INIT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.domain != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Register endpoint (as ThreadPool - historical name)</span></span><br><span class="line">        oname = <span class="keyword">new</span> ObjectName(domain + <span class="string">&quot;:type=ThreadPool,name=\&quot;&quot;</span> + getName() + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(<span class="keyword">this</span>, oname, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        ObjectName socketPropertiesOname = <span class="keyword">new</span> ObjectName(domain +</span><br><span class="line">                <span class="string">&quot;:type=SocketProperties,name=\&quot;&quot;</span> + getName() + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        socketProperties.setObjectName(socketPropertiesOname);</span><br><span class="line">        Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(socketProperties, socketPropertiesOname, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SSLHostConfig sslHostConfig : findSslHostConfigs()) &#123;</span><br><span class="line">            registerJmx(sslHostConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="AbstractEndpoint-bindWithCleanup"><a href="#AbstractEndpoint-bindWithCleanup" class="headerlink" title="AbstractEndpoint#bindWithCleanup"></a>AbstractEndpoint#bindWithCleanup</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindWithCleanup</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bind();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="comment">// Ensure open sockets etc. are cleaned up if something goes</span></span><br><span class="line">        <span class="comment">// wrong during bind</span></span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        unbind();</span><br><span class="line">        <span class="keyword">throw</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="NioEndpoint-bind"><a href="#NioEndpoint-bind" class="headerlink" title="NioEndpoint#bind"></a>NioEndpoint#bind</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    initServerSocket();</span><br><span class="line"></span><br><span class="line">    setStopLatch(<span class="keyword">new</span> CountDownLatch(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize SSL if needed</span></span><br><span class="line">    initialiseSsl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="NioEndpoint-initServerSocket"><a href="#NioEndpoint-initServerSocket" class="headerlink" title="NioEndpoint#initServerSocket"></a>NioEndpoint#initServerSocket</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initServerSocket</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getUseInheritedChannel()) &#123;</span><br><span class="line">        <span class="comment">// Retrieve the channel provided by the OS</span></span><br><span class="line">        Channel ic = System.inheritedChannel();</span><br><span class="line">        <span class="keyword">if</span> (ic <span class="keyword">instanceof</span> ServerSocketChannel) &#123;</span><br><span class="line">            serverSock = (ServerSocketChannel) ic;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (serverSock == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(sm.getString(<span class="string">&quot;endpoint.init.bind.inherited&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getUnixDomainSocketPath() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        SocketAddress sa = JreCompat.getInstance().getUnixDomainSocketAddress(getUnixDomainSocketPath());</span><br><span class="line">        serverSock = JreCompat.getInstance().openUnixDomainServerSocketChannel();</span><br><span class="line">        serverSock.bind(sa, getAcceptCount());</span><br><span class="line">        <span class="keyword">if</span> (getUnixDomainSocketPathPermissions() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Path path = Paths.get(getUnixDomainSocketPath());</span><br><span class="line">            Set&lt;PosixFilePermission&gt; permissions =</span><br><span class="line">                    PosixFilePermissions.fromString(getUnixDomainSocketPathPermissions());</span><br><span class="line">            <span class="keyword">if</span> (path.getFileSystem().supportedFileAttributeViews().contains(<span class="string">&quot;posix&quot;</span>)) &#123;</span><br><span class="line">                FileAttribute&lt;Set&lt;PosixFilePermission&gt;&gt; attrs = PosixFilePermissions.asFileAttribute(permissions);</span><br><span class="line">                Files.setAttribute(path, attrs.name(), attrs.value());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                java.io.File file = path.toFile();</span><br><span class="line">                <span class="keyword">if</span> (permissions.contains(PosixFilePermission.OTHERS_READ) &amp;&amp; !file.setReadable(<span class="keyword">true</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                    log.warn(sm.getString(<span class="string">&quot;endpoint.nio.perms.readFail&quot;</span>, file.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (permissions.contains(PosixFilePermission.OTHERS_WRITE) &amp;&amp; !file.setWritable(<span class="keyword">true</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                    log.warn(sm.getString(<span class="string">&quot;endpoint.nio.perms.writeFail&quot;</span>, file.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        serverSock = ServerSocketChannel.open();</span><br><span class="line">        socketProperties.setProperties(serverSock.socket());</span><br><span class="line">        InetSocketAddress addr = <span class="keyword">new</span> InetSocketAddress(getAddress(), getPortWithOffset());</span><br><span class="line">        serverSock.bind(addr, getAcceptCount());</span><br><span class="line">    &#125;</span><br><span class="line">    serverSock.configureBlocking(<span class="keyword">true</span>); <span class="comment">//mimic APR behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>调用<code>ServerSocketChannel#open</code>获取<code>ServerSocketChannel</code>实例</li><li>调用<code>ServerSocketChannel#bind</code>绑定服务地址</li></ol><h4 id="AbstractEndpoint-start"><a href="#AbstractEndpoint-start" class="headerlink" title="AbstractEndpoint#start"></a>AbstractEndpoint#start</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindState == BindState.UNBOUND) &#123;</span><br><span class="line">        bindWithCleanup();</span><br><span class="line">        bindState = BindState.BOUND_ON_START;</span><br><span class="line">    &#125;</span><br><span class="line">    startInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="NioEndpoint-startInternal"><a href="#NioEndpoint-startInternal" class="headerlink" title="NioEndpoint#startInternal"></a>NioEndpoint#startInternal</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">        running = <span class="keyword">true</span>;</span><br><span class="line">        paused = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (socketProperties.getProcessorCache() != <span class="number">0</span>) &#123;</span><br><span class="line">            processorCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    socketProperties.getProcessorCache());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (socketProperties.getEventCache() != <span class="number">0</span>) &#123;</span><br><span class="line">            eventCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    socketProperties.getEventCache());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> actualBufferPool =</span><br><span class="line">                socketProperties.getActualBufferPool(isSSLEnabled() ? getSniParseLimit() * <span class="number">2</span> : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (actualBufferPool != <span class="number">0</span>) &#123;</span><br><span class="line">            nioChannels = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    actualBufferPool);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create worker collection</span></span><br><span class="line">        <span class="keyword">if</span> (getExecutor() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            createExecutor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        initializeConnectionLatch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start poller thread</span></span><br><span class="line">        poller = <span class="keyword">new</span> Poller();</span><br><span class="line">        Thread pollerThread = <span class="keyword">new</span> Thread(poller, getName() + <span class="string">&quot;-Poller&quot;</span>);</span><br><span class="line">        pollerThread.setPriority(threadPriority);</span><br><span class="line">        pollerThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        pollerThread.start();</span><br><span class="line"></span><br><span class="line">        startAcceptorThread();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>判断当前是否处于启动状态，在初次启动时<code>running</code>为<code>false</code>所以能正常进入，且<code>running</code>被<code>volatile</code>不会出现并发情况；</p></li><li><p>设置初始值</p></li><li><p>调用<code>NioEndpoint#createExecutor</code>创建<code>worker</code>线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    internalExecutor = <span class="keyword">true</span>;</span><br><span class="line">    TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue();</span><br><span class="line">    TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(getName() + <span class="string">&quot;-exec-&quot;</span>, daemon, getThreadPriority());</span><br><span class="line">    executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</span><br><span class="line">    taskqueue.setParent( (ThreadPoolExecutor) executor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>Poller</code>线程</p></li><li><p>调用<code>NioEndpoint#startAcceptorThread</code>创建<code>Acceptor</code>线程，并启动</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startAcceptorThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    acceptor = <span class="keyword">new</span> Acceptor&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">    String threadName = getName() + <span class="string">&quot;-Acceptor&quot;</span>;</span><br><span class="line">    acceptor.setThreadName(threadName);</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(acceptor, threadName);</span><br><span class="line">    t.setPriority(getAcceptorThreadPriority());</span><br><span class="line">    t.setDaemon(getDaemon());</span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Acceptor"><a href="#Acceptor" class="headerlink" title="Acceptor"></a>Acceptor</h3><p>以下代码段为<code>Acceptor#run</code>方法中核心代码段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!stopCalled) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Accept the next incoming connection from the server</span></span><br><span class="line">        <span class="comment">// socket</span></span><br><span class="line">        <span class="comment">// 调用ServerSocketChannel#accept等待客户端连接</span></span><br><span class="line">        socket = endpoint.serverSocketAccept();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ioe) &#123;</span><br><span class="line">        <span class="comment">// We didn&#x27;t get a socket</span></span><br><span class="line">        endpoint.countDownConnection();</span><br><span class="line">        <span class="keyword">if</span> (endpoint.isRunning()) &#123;</span><br><span class="line">            <span class="comment">// Introduce delay if necessary</span></span><br><span class="line">            errorDelay = handleExceptionWithDelay(errorDelay);</span><br><span class="line">            <span class="comment">// re-throw</span></span><br><span class="line">            <span class="keyword">throw</span> ioe;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Successful accept, reset the error delay</span></span><br><span class="line">errorDelay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure the socket</span></span><br><span class="line">    <span class="comment">// 判断端点当前状态没有中断</span></span><br><span class="line"><span class="keyword">if</span> (!stopCalled &amp;&amp; !endpoint.isPaused()) &#123;</span><br><span class="line"><span class="comment">// setSocketOptions() will hand the socket off to</span></span><br><span class="line"><span class="comment">// an appropriate processor if successful</span></span><br><span class="line">        <span class="comment">// 调用setSocketOptions将socket封装后注册到poller线程</span></span><br><span class="line"><span class="keyword">if</span> (!endpoint.setSocketOptions(socket)) &#123;</span><br><span class="line">            <span class="comment">// 若注册失败或异常则关闭socket</span></span><br><span class="line">endpoint.closeSocket(socket);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 若当前端点中断，则销毁socket</span></span><br><span class="line">endpoint.destroySocket(socket);</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> SocketChannel <span class="title">serverSocketAccept</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SocketChannel result = serverSock.accept();</span><br><span class="line">        SocketAddress currentRemoteAddress = result.getRemoteAddress();</span><br><span class="line">        <span class="keyword">if</span> (currentRemoteAddress.equals(previousAcceptedSocketRemoteAddress)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(sm.getString(<span class="string">&quot;endpoint.err.duplicateAccept&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        previousAcceptedSocketRemoteAddress = currentRemoteAddress;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li><p>调用<code>ServerSocketChannel#accept</code>阻塞等待客户端连接</p></li><li><p>成功接收到客户端连接后，调用<code>NioEndpoint#setSocketOptions</code>将<code>socket</code>注册到<code>poller</code>线程</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setSocketOptions</span><span class="params">(SocketChannel socket)</span> </span>&#123;</span><br><span class="line">    NioSocketWrapper socketWrapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Allocate channel and wrapper</span></span><br><span class="line">        NioChannel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 从栈中取出一个管道</span></span><br><span class="line">        <span class="keyword">if</span> (nioChannels != <span class="keyword">null</span>) &#123;</span><br><span class="line">            channel = nioChannels.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (channel == <span class="keyword">null</span>) &#123;</span><br><span class="line">            SocketBufferHandler bufhandler = <span class="keyword">new</span> SocketBufferHandler(</span><br><span class="line">                    socketProperties.getAppReadBufSize(),</span><br><span class="line">                    socketProperties.getAppWriteBufSize(),</span><br><span class="line">                    socketProperties.getDirectBuffer());</span><br><span class="line">            <span class="keyword">if</span> (isSSLEnabled()) &#123;</span><br><span class="line">                channel = <span class="keyword">new</span> SecureNioChannel(bufhandler, <span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                channel = <span class="keyword">new</span> NioChannel(bufhandler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 封装socket</span></span><br><span class="line">        NioSocketWrapper newWrapper = <span class="keyword">new</span> NioSocketWrapper(channel, <span class="keyword">this</span>);</span><br><span class="line">        channel.reset(socket, newWrapper);</span><br><span class="line">        connections.put(socket, newWrapper);</span><br><span class="line">        socketWrapper = newWrapper;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set socket properties</span></span><br><span class="line">        <span class="comment">// Disable blocking, polling will be used</span></span><br><span class="line">        <span class="comment">// 禁用阻塞，使用轮询</span></span><br><span class="line">        socket.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (getUnixDomainSocketPath() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            socketProperties.setProperties(socket.socket());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socketWrapper.setReadTimeout(getConnectionTimeout());</span><br><span class="line">        socketWrapper.setWriteTimeout(getConnectionTimeout());</span><br><span class="line">        socketWrapper.setKeepAliveLeft(NioEndpoint.<span class="keyword">this</span>.getMaxKeepAliveRequests());</span><br><span class="line">        <span class="comment">// poller线程注册socket</span></span><br><span class="line">        poller.register(socketWrapper);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.error(sm.getString(<span class="string">&quot;endpoint.socketOptionsError&quot;</span>), t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable tt) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(tt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (socketWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            destroySocket(socket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Tell to close the socket if needed</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/18/Tomcat/"/>
      <url>/2022/08/18/Tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="学习Tomcat的设计模式-Reacotr模型"><a href="#学习Tomcat的设计模式-Reacotr模型" class="headerlink" title="学习Tomcat的设计模式(Reacotr模型)"></a>学习Tomcat的设计模式(Reacotr模型)</h1><h2 id="Tomcat启动流程"><a href="#Tomcat启动流程" class="headerlink" title="Tomcat启动流程"></a>Tomcat启动流程</h2><h3 id="Tomcat启动命令"><a href="#Tomcat启动命令" class="headerlink" title="Tomcat启动命令"></a>Tomcat启动命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh </span><br></pre></td></tr></table></figure><p>查看<code>startup.sh</code>脚本内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; startup.sh</span></span><br><span class="line">PRGDIR=`dirname &quot;$PRG&quot;`</span><br><span class="line">EXECUTABLE=catalina.sh</span><br><span class="line">...</span><br><span class="line">exec &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; start &quot;$@&quot;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>所以实际启动命令为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./catalina.sh start</span><br></pre></td></tr></table></figure><p>查看<code>catalina.sh</code>脚本内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">elif [ &quot;$1&quot; = &quot;start&quot; ] ; then</span><br><span class="line">...</span><br><span class="line">if [ &quot;$1&quot; = &quot;-security&quot; ] ; then</span><br><span class="line">    if [ $have_tty -eq 1 ]; then</span><br><span class="line">      echo &quot;Using Security Manager&quot;</span><br><span class="line">    fi</span><br><span class="line">    shift</span><br><span class="line">    eval $_NOHUP &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$CATALINA_LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER &quot;$JAVA_OPTS&quot; &quot;$CATALINA_OPTS&quot; \</span><br><span class="line">      -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">      -Djava.security.manager \</span><br><span class="line">      -Djava.security.policy==&quot;\&quot;$CATALINA_BASE/conf/catalina.policy\&quot;&quot; \</span><br><span class="line">      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">      -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \</span><br><span class="line">      &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;</span><br><span class="line">  else</span><br><span class="line">    eval $_NOHUP &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$CATALINA_LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER &quot;$JAVA_OPTS&quot; &quot;$CATALINA_OPTS&quot; \</span><br><span class="line">      -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">      -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \</span><br><span class="line">      &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;</span><br><span class="line"></span><br><span class="line">  fi</span><br></pre></td></tr></table></figure><p>通过查看<code>catalina.sh</code>脚本内容可知不启用 SecurityManager时Tomcat启动命令实际为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eval $_NOHUP &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$CATALINA_LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER &quot;$JAVA_OPTS&quot; &quot;$CATALINA_OPTS&quot; \</span><br><span class="line">      -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</span><br><span class="line">      -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</span><br><span class="line">      -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</span><br><span class="line">      -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \</span><br><span class="line">      &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;</span><br></pre></td></tr></table></figure><h3 id="入口类"><a href="#入口类" class="headerlink" title="入口类"></a>入口类</h3><p>启动类为：<code>org.apache.catalina.startup.Bootstrap#main</code>方法<code>arg[]-&gt;&#123;start&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object daemonLock = <span class="keyword">new</span> Object();</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 设置初始属性（基本都是在定位tomcat目录）</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// Will always be non-null</span></span><br><span class="line">        String userDir = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Home first</span></span><br><span class="line">        String home = System.getProperty(Constants.CATALINA_HOME_PROP);</span><br><span class="line">        File homeFile = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (home != <span class="keyword">null</span>) &#123;</span><br><span class="line">            File f = <span class="keyword">new</span> File(home);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                homeFile = f.getCanonicalFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                homeFile = f.getAbsoluteFile();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (homeFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// First fall-back. See if current directory is a bin directory</span></span><br><span class="line">            <span class="comment">// in a normal Tomcat install</span></span><br><span class="line">            File bootstrapJar = <span class="keyword">new</span> File(userDir, <span class="string">&quot;bootstrap.jar&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bootstrapJar.exists()) &#123;</span><br><span class="line">                File f = <span class="keyword">new</span> File(userDir, <span class="string">&quot;..&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    homeFile = f.getCanonicalFile();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                    homeFile = f.getAbsoluteFile();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (homeFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Second fall-back. Use current directory</span></span><br><span class="line">            File f = <span class="keyword">new</span> File(userDir);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                homeFile = f.getCanonicalFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                homeFile = f.getAbsoluteFile();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        catalinaHomeFile = homeFile;</span><br><span class="line">        System.setProperty(</span><br><span class="line">                Constants.CATALINA_HOME_PROP, catalinaHomeFile.getPath());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Then base</span></span><br><span class="line">        String base = System.getProperty(Constants.CATALINA_BASE_PROP);</span><br><span class="line">        <span class="keyword">if</span> (base == <span class="keyword">null</span>) &#123;</span><br><span class="line">            catalinaBaseFile = catalinaHomeFile;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            File baseFile = <span class="keyword">new</span> File(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                baseFile = baseFile.getCanonicalFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                baseFile = baseFile.getAbsoluteFile();</span><br><span class="line">            &#125;</span><br><span class="line">            catalinaBaseFile = baseFile;</span><br><span class="line">        &#125;</span><br><span class="line">        System.setProperty(</span><br><span class="line">                Constants.CATALINA_BASE_PROP, catalinaBaseFile.getPath());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="comment">// 同步块，保障Bootstrap仅初始一次</span></span><br><span class="line">        <span class="keyword">synchronized</span> (daemonLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (daemon == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Don&#x27;t set daemon until init() has completed</span></span><br><span class="line">                Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Bootstrap初始化</span></span><br><span class="line">                    bootstrap.init();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    handleThrowable(t);</span><br><span class="line">                    t.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                daemon = bootstrap;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// When running as a service the call to stop will be on a new</span></span><br><span class="line">                <span class="comment">// thread so make sure the correct class loader is used to</span></span><br><span class="line">                <span class="comment">// prevent a range of class not found exceptions.</span></span><br><span class="line">                Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String command = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                command = args[args.length - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (command.equals(<span class="string">&quot;startd&quot;</span>)) &#123;</span><br><span class="line">                args[args.length - <span class="number">1</span>] = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">                daemon.load(args);</span><br><span class="line">                daemon.start();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">&quot;stopd&quot;</span>)) &#123;</span><br><span class="line">                args[args.length - <span class="number">1</span>] = <span class="string">&quot;stop&quot;</span>;</span><br><span class="line">                daemon.stop();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">&quot;start&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// Bootstrap#setAwait</span></span><br><span class="line">                daemon.setAwait(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">// Bootstrap#load</span></span><br><span class="line">                <span class="comment">// Bootstrap#load -&gt; Catalina#load -&gt; Catalina#parseServerXml实现对Server.xml的解析</span></span><br><span class="line">                daemon.load(args);</span><br><span class="line">                <span class="comment">// Bootstrap#start</span></span><br><span class="line">                daemon.start();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == daemon.getServer()) &#123;</span><br><span class="line">                    System.exit(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">&quot;stop&quot;</span>)) &#123;</span><br><span class="line">                daemon.stopServer(args);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">&quot;configtest&quot;</span>)) &#123;</span><br><span class="line">                daemon.load(args);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == daemon.getServer()) &#123;</span><br><span class="line">                    System.exit(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;Bootstrap: command \&quot;&quot;</span> + command + <span class="string">&quot;\&quot; does not exist.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// Unwrap the Exception for clearer error reporting</span></span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> InvocationTargetException &amp;&amp;</span><br><span class="line">                    t.getCause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                t = t.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">            handleThrowable(t);</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Bootstrap-start"><a href="#Bootstrap-start" class="headerlink" title="Bootstrap#start"></a>Bootstrap#start</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 若未init则初始化</span></span><br><span class="line">    <span class="keyword">if</span> (catalinaDaemon == <span class="keyword">null</span>) &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Method method = catalinaDaemon.getClass().getMethod(<span class="string">&quot;start&quot;</span>, (Class [])<span class="keyword">null</span>);</span><br><span class="line">    method.invoke(catalinaDaemon, (Object [])<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Bootstarp#init</code>方法中<code>catalinaDaemon</code>为<code>Catalina</code>类的一个实例，所以在<code>Bootstarp#start</code>方法中实际调用的是<code>Catalina#start</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用server#start</span></span><br><span class="line">            getServer().start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            log.fatal(sm.getString(<span class="string">&quot;catalina.serverStartFail&quot;</span>), e);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                getServer().destroy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e1) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;destroy() failed for failed Server &quot;</span>, e1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类<code>Server</code>是一个接口，他的实现类为<code>StandardServer</code>，<code>Server#start</code>实现方法为<code>StandardServer#startInternal</code></p><h3 id="StandardServer-startInternal"><a href="#StandardServer-startInternal" class="headerlink" title="StandardServer#startInternal"></a>StandardServer#startInternal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    fireLifecycleEvent(CONFIGURE_START_EVENT, <span class="keyword">null</span>);</span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    globalNamingResources.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Services</span></span><br><span class="line">    <span class="keyword">synchronized</span> (servicesLock) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Service service : services) &#123;</span><br><span class="line">            <span class="comment">// 循环启动server.xml中配置的一组service</span></span><br><span class="line">            service.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (periodicEventDelay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        monitorFuture = getUtilityExecutor().scheduleWithFixedDelay(</span><br><span class="line">                () -&gt; startPeriodicLifecycleEvent(), <span class="number">0</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Server</code>启动完成后，调用<code>Service#start</code>，与类<code>Server</code>同理，<code>Service#start</code>实现方法为<code>StandardService#startInternal</code></p><h3 id="StandardService-startInternal"><a href="#StandardService-startInternal" class="headerlink" title="StandardService#startInternal"></a>StandardService#startInternal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(log.isInfoEnabled()) &#123;</span><br><span class="line">        log.info(sm.getString(<span class="string">&quot;standardService.start.name&quot;</span>, <span class="keyword">this</span>.name));</span><br><span class="line">    &#125;</span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Container first</span></span><br><span class="line">    <span class="keyword">if</span> (engine != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (engine) &#123;</span><br><span class="line">            <span class="comment">// 若engine配置不为空，则启动engine</span></span><br><span class="line">            engine.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (executors) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Executor executor: executors) &#123;</span><br><span class="line">            <span class="comment">// 若executor配置不为空，则启动executor</span></span><br><span class="line">            executor.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 启动监听</span></span><br><span class="line">    mapperListener.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Connectors second</span></span><br><span class="line">    <span class="keyword">synchronized</span> (connectorsLock) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Connector connector: connectors) &#123;</span><br><span class="line">            <span class="comment">// If it has already failed, don&#x27;t try and start it</span></span><br><span class="line">            <span class="keyword">if</span> (connector.getState() != LifecycleState.FAILED) &#123;</span><br><span class="line">                <span class="comment">// 启动connector</span></span><br><span class="line">                connector.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StandardService#startInternal</code>方法中核心就是去启动Server.xml中配置的<code>Engine</code>(引擎)、<code>Executor</code>(执行器)、<code>Connector</code>(连接器)，同时启动监听</p><p><code>StandardEngine#startInternal</code>主要就是调用父类去同步启动管道<code>pipeline</code></p><p><code>StandardThreadExecutor#startInternal</code>主要作用为初始化执行器线程池</p><p>至此Tomcat容器基本已经启动完成，同时调用了<code>Connector#start</code>，接下来就到了Tomcat的第二个核心，也是Reacotr模型的所在-<strong>连接器</strong></p><h3 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>在<code>Catalina#parseServerXml</code>方法中会通过解析Server.xml去创建生成对应的容器【网上看到说parseServerXml是通过SAX解析的xml，没深入去了解过】</p><p><img src="C:\Users\Laim\Documents\Connector_new.png"></p><p>由时序图可以看出<code>Connector</code>构造方法去调用<code>ProtocolHandler#create</code>，<code>server.xml</code>中<code>Connector</code>默认配置为<code>&quot;HTTP/1.1&quot;</code>，所以<code>ProtocolHandler#create</code>将会返回一个<code>Http11NioProtocol</code>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Http11NioProtocol#Constructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Http11NioProtocol</span> <span class="keyword">extends</span> <span class="title">AbstractHttp11JsseProtocol</span>&lt;<span class="title">NioChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Http11NioProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> NioEndpoint());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AbstractHttp11JsseProtocol#Constructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHttp11JsseProtocol</span>&lt;<span class="title">S</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractHttp11Protocol</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// endpoint-&gt;new NioEndpoint()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractHttp11JsseProtocol</span><span class="params">(AbstractJsseEndpoint&lt;S,?&gt; endpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(endpoint);</span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br><span class="line"><span class="comment">// AbstractHttp11Protocol#Constructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHttp11Protocol</span>&lt;<span class="title">S</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractProtocol</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractHttp11Protocol</span><span class="params">(AbstractEndpoint&lt;S,?&gt; endpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(endpoint);</span><br><span class="line">        <span class="comment">// 设置连接超时</span></span><br><span class="line">        setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);</span><br><span class="line">        <span class="comment">// 创建&amp;设置连接处理器</span></span><br><span class="line">        ConnectionHandler&lt;S&gt; cHandler = <span class="keyword">new</span> ConnectionHandler&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">        setHandler(cHandler);</span><br><span class="line">        getEndpoint().setHandler(cHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AbstractProtocol#Constructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProtocol</span>&lt;<span class="title">S</span>&gt; <span class="keyword">implements</span> <span class="title">ProtocolHandler</span>, <span class="title">MBeanRegistration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractProtocol</span><span class="params">(AbstractEndpoint&lt;S,?&gt; endpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endpoint = endpoint;</span><br><span class="line">        setConnectionLinger(Constants.DEFAULT_CONNECTION_LINGER);</span><br><span class="line">        setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Connector-startInternal"><a href="#Connector-startInternal" class="headerlink" title="Connector#startInternal"></a>Connector#startInternal</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate settings before starting</span></span><br><span class="line">    String id = (protocolHandler != <span class="keyword">null</span>) ? protocolHandler.getId() : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="keyword">null</span> &amp;&amp; getPortWithOffset() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(</span><br><span class="line">                <span class="string">&quot;coyoteConnector.invalidPort&quot;</span>, Integer.valueOf(getPortWithOffset())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        protocolHandler.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">                sm.getString(<span class="string">&quot;coyoteConnector.protocolHandlerStartFailed&quot;</span>), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AbstractProtocol-start"><a href="#AbstractProtocol-start" class="headerlink" title="AbstractProtocol#start"></a>AbstractProtocol#start</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getLog().isInfoEnabled()) &#123;</span><br><span class="line">        getLog().info(sm.getString(<span class="string">&quot;abstractProtocolHandler.start&quot;</span>, getName()));</span><br><span class="line">        logPortOffset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    endpoint.start();</span><br><span class="line">    monitorFuture = getUtilityExecutor().scheduleWithFixedDelay(</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (!isPaused()) &#123;</span><br><span class="line">                    startAsyncTimeout();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AbstractEndpoint-init"><a href="#AbstractEndpoint-init" class="headerlink" title="AbstractEndpoint#init"></a>AbstractEndpoint#init</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自Bootstarp中调用init初始化方法追溯下来会调用到这个方法，用于初始化ServerSocket</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindOnInit) &#123;</span><br><span class="line">        bindWithCleanup();</span><br><span class="line">        bindState = BindState.BOUND_ON_INIT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.domain != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Register endpoint (as ThreadPool - historical name)</span></span><br><span class="line">        oname = <span class="keyword">new</span> ObjectName(domain + <span class="string">&quot;:type=ThreadPool,name=\&quot;&quot;</span> + getName() + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(<span class="keyword">this</span>, oname, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        ObjectName socketPropertiesOname = <span class="keyword">new</span> ObjectName(domain +</span><br><span class="line">                <span class="string">&quot;:type=SocketProperties,name=\&quot;&quot;</span> + getName() + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        socketProperties.setObjectName(socketPropertiesOname);</span><br><span class="line">        Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(socketProperties, socketPropertiesOname, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SSLHostConfig sslHostConfig : findSslHostConfigs()) &#123;</span><br><span class="line">            registerJmx(sslHostConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="AbstractEndpoint-bindWithCleanup"><a href="#AbstractEndpoint-bindWithCleanup" class="headerlink" title="AbstractEndpoint#bindWithCleanup"></a>AbstractEndpoint#bindWithCleanup</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindWithCleanup</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bind();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="comment">// Ensure open sockets etc. are cleaned up if something goes</span></span><br><span class="line">        <span class="comment">// wrong during bind</span></span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        unbind();</span><br><span class="line">        <span class="keyword">throw</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="NioEndpoint-bind"><a href="#NioEndpoint-bind" class="headerlink" title="NioEndpoint#bind"></a>NioEndpoint#bind</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    initServerSocket();</span><br><span class="line"></span><br><span class="line">    setStopLatch(<span class="keyword">new</span> CountDownLatch(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize SSL if needed</span></span><br><span class="line">    initialiseSsl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="NioEndpoint-initServerSocket"><a href="#NioEndpoint-initServerSocket" class="headerlink" title="NioEndpoint#initServerSocket"></a>NioEndpoint#initServerSocket</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initServerSocket</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getUseInheritedChannel()) &#123;</span><br><span class="line">        <span class="comment">// Retrieve the channel provided by the OS</span></span><br><span class="line">        Channel ic = System.inheritedChannel();</span><br><span class="line">        <span class="keyword">if</span> (ic <span class="keyword">instanceof</span> ServerSocketChannel) &#123;</span><br><span class="line">            serverSock = (ServerSocketChannel) ic;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (serverSock == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(sm.getString(<span class="string">&quot;endpoint.init.bind.inherited&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getUnixDomainSocketPath() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        SocketAddress sa = JreCompat.getInstance().getUnixDomainSocketAddress(getUnixDomainSocketPath());</span><br><span class="line">        serverSock = JreCompat.getInstance().openUnixDomainServerSocketChannel();</span><br><span class="line">        serverSock.bind(sa, getAcceptCount());</span><br><span class="line">        <span class="keyword">if</span> (getUnixDomainSocketPathPermissions() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Path path = Paths.get(getUnixDomainSocketPath());</span><br><span class="line">            Set&lt;PosixFilePermission&gt; permissions =</span><br><span class="line">                    PosixFilePermissions.fromString(getUnixDomainSocketPathPermissions());</span><br><span class="line">            <span class="keyword">if</span> (path.getFileSystem().supportedFileAttributeViews().contains(<span class="string">&quot;posix&quot;</span>)) &#123;</span><br><span class="line">                FileAttribute&lt;Set&lt;PosixFilePermission&gt;&gt; attrs = PosixFilePermissions.asFileAttribute(permissions);</span><br><span class="line">                Files.setAttribute(path, attrs.name(), attrs.value());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                java.io.File file = path.toFile();</span><br><span class="line">                <span class="keyword">if</span> (permissions.contains(PosixFilePermission.OTHERS_READ) &amp;&amp; !file.setReadable(<span class="keyword">true</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                    log.warn(sm.getString(<span class="string">&quot;endpoint.nio.perms.readFail&quot;</span>, file.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (permissions.contains(PosixFilePermission.OTHERS_WRITE) &amp;&amp; !file.setWritable(<span class="keyword">true</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                    log.warn(sm.getString(<span class="string">&quot;endpoint.nio.perms.writeFail&quot;</span>, file.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        serverSock = ServerSocketChannel.open();</span><br><span class="line">        socketProperties.setProperties(serverSock.socket());</span><br><span class="line">        InetSocketAddress addr = <span class="keyword">new</span> InetSocketAddress(getAddress(), getPortWithOffset());</span><br><span class="line">        serverSock.bind(addr, getAcceptCount());</span><br><span class="line">    &#125;</span><br><span class="line">    serverSock.configureBlocking(<span class="keyword">true</span>); <span class="comment">//mimic APR behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>调用<code>ServerSocketChannel#open</code>获取<code>ServerSocketChannel</code>实例</li><li>调用<code>ServerSocketChannel#bind</code>绑定服务地址</li></ol><h4 id="AbstractEndpoint-start"><a href="#AbstractEndpoint-start" class="headerlink" title="AbstractEndpoint#start"></a>AbstractEndpoint#start</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindState == BindState.UNBOUND) &#123;</span><br><span class="line">        bindWithCleanup();</span><br><span class="line">        bindState = BindState.BOUND_ON_START;</span><br><span class="line">    &#125;</span><br><span class="line">    startInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="NioEndpoint-startInternal"><a href="#NioEndpoint-startInternal" class="headerlink" title="NioEndpoint#startInternal"></a>NioEndpoint#startInternal</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">        running = <span class="keyword">true</span>;</span><br><span class="line">        paused = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (socketProperties.getProcessorCache() != <span class="number">0</span>) &#123;</span><br><span class="line">            processorCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    socketProperties.getProcessorCache());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (socketProperties.getEventCache() != <span class="number">0</span>) &#123;</span><br><span class="line">            eventCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    socketProperties.getEventCache());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> actualBufferPool =</span><br><span class="line">                socketProperties.getActualBufferPool(isSSLEnabled() ? getSniParseLimit() * <span class="number">2</span> : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (actualBufferPool != <span class="number">0</span>) &#123;</span><br><span class="line">            nioChannels = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    actualBufferPool);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create worker collection</span></span><br><span class="line">        <span class="keyword">if</span> (getExecutor() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            createExecutor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        initializeConnectionLatch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start poller thread</span></span><br><span class="line">        poller = <span class="keyword">new</span> Poller();</span><br><span class="line">        Thread pollerThread = <span class="keyword">new</span> Thread(poller, getName() + <span class="string">&quot;-Poller&quot;</span>);</span><br><span class="line">        pollerThread.setPriority(threadPriority);</span><br><span class="line">        pollerThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        pollerThread.start();</span><br><span class="line"></span><br><span class="line">        startAcceptorThread();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>判断当前是否处于启动状态，在初次启动时<code>running</code>为<code>false</code>所以能正常进入，且<code>running</code>被<code>volatile</code>不会出现并发情况；</p></li><li><p>设置初始值</p></li><li><p>调用<code>NioEndpoint#createExecutor</code>创建<code>worker</code>线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    internalExecutor = <span class="keyword">true</span>;</span><br><span class="line">    TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue();</span><br><span class="line">    TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(getName() + <span class="string">&quot;-exec-&quot;</span>, daemon, getThreadPriority());</span><br><span class="line">    executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</span><br><span class="line">    taskqueue.setParent( (ThreadPoolExecutor) executor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>Poller</code>线程</p></li><li><p>调用<code>NioEndpoint#startAcceptorThread</code>创建<code>Acceptor</code>线程，并启动</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startAcceptorThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    acceptor = <span class="keyword">new</span> Acceptor&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">    String threadName = getName() + <span class="string">&quot;-Acceptor&quot;</span>;</span><br><span class="line">    acceptor.setThreadName(threadName);</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(acceptor, threadName);</span><br><span class="line">    t.setPriority(getAcceptorThreadPriority());</span><br><span class="line">    t.setDaemon(getDaemon());</span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Acceptor"><a href="#Acceptor" class="headerlink" title="Acceptor"></a>Acceptor</h3><p>以下代码段为<code>Acceptor#run</code>方法中核心代码段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!stopCalled) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Accept the next incoming connection from the server</span></span><br><span class="line">        <span class="comment">// socket</span></span><br><span class="line">        <span class="comment">// 调用ServerSocketChannel#accept等待客户端连接</span></span><br><span class="line">        socket = endpoint.serverSocketAccept();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ioe) &#123;</span><br><span class="line">        <span class="comment">// We didn&#x27;t get a socket</span></span><br><span class="line">        endpoint.countDownConnection();</span><br><span class="line">        <span class="keyword">if</span> (endpoint.isRunning()) &#123;</span><br><span class="line">            <span class="comment">// Introduce delay if necessary</span></span><br><span class="line">            errorDelay = handleExceptionWithDelay(errorDelay);</span><br><span class="line">            <span class="comment">// re-throw</span></span><br><span class="line">            <span class="keyword">throw</span> ioe;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Successful accept, reset the error delay</span></span><br><span class="line">errorDelay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure the socket</span></span><br><span class="line">    <span class="comment">// 判断端点当前状态没有中断</span></span><br><span class="line"><span class="keyword">if</span> (!stopCalled &amp;&amp; !endpoint.isPaused()) &#123;</span><br><span class="line"><span class="comment">// setSocketOptions() will hand the socket off to</span></span><br><span class="line"><span class="comment">// an appropriate processor if successful</span></span><br><span class="line">        <span class="comment">// 调用setSocketOptions将socket封装后注册到poller线程</span></span><br><span class="line"><span class="keyword">if</span> (!endpoint.setSocketOptions(socket)) &#123;</span><br><span class="line">            <span class="comment">// 若注册失败或异常则关闭socket</span></span><br><span class="line">endpoint.closeSocket(socket);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 若当前端点中断，则销毁socket</span></span><br><span class="line">endpoint.destroySocket(socket);</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> SocketChannel <span class="title">serverSocketAccept</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SocketChannel result = serverSock.accept();</span><br><span class="line">        SocketAddress currentRemoteAddress = result.getRemoteAddress();</span><br><span class="line">        <span class="keyword">if</span> (currentRemoteAddress.equals(previousAcceptedSocketRemoteAddress)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(sm.getString(<span class="string">&quot;endpoint.err.duplicateAccept&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        previousAcceptedSocketRemoteAddress = currentRemoteAddress;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li><p>调用<code>ServerSocketChannel#accept</code>阻塞等待客户端连接</p></li><li><p>成功接收到客户端连接后，调用<code>NioEndpoint#setSocketOptions</code>将<code>socket</code>注册到<code>poller</code>线程</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setSocketOptions</span><span class="params">(SocketChannel socket)</span> </span>&#123;</span><br><span class="line">    NioSocketWrapper socketWrapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Allocate channel and wrapper</span></span><br><span class="line">        NioChannel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 从栈中取出一个管道</span></span><br><span class="line">        <span class="keyword">if</span> (nioChannels != <span class="keyword">null</span>) &#123;</span><br><span class="line">            channel = nioChannels.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (channel == <span class="keyword">null</span>) &#123;</span><br><span class="line">            SocketBufferHandler bufhandler = <span class="keyword">new</span> SocketBufferHandler(</span><br><span class="line">                    socketProperties.getAppReadBufSize(),</span><br><span class="line">                    socketProperties.getAppWriteBufSize(),</span><br><span class="line">                    socketProperties.getDirectBuffer());</span><br><span class="line">            <span class="keyword">if</span> (isSSLEnabled()) &#123;</span><br><span class="line">                channel = <span class="keyword">new</span> SecureNioChannel(bufhandler, <span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                channel = <span class="keyword">new</span> NioChannel(bufhandler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 封装socket</span></span><br><span class="line">        NioSocketWrapper newWrapper = <span class="keyword">new</span> NioSocketWrapper(channel, <span class="keyword">this</span>);</span><br><span class="line">        channel.reset(socket, newWrapper);</span><br><span class="line">        connections.put(socket, newWrapper);</span><br><span class="line">        socketWrapper = newWrapper;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set socket properties</span></span><br><span class="line">        <span class="comment">// Disable blocking, polling will be used</span></span><br><span class="line">        <span class="comment">// 禁用阻塞，使用轮询</span></span><br><span class="line">        socket.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (getUnixDomainSocketPath() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            socketProperties.setProperties(socket.socket());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socketWrapper.setReadTimeout(getConnectionTimeout());</span><br><span class="line">        socketWrapper.setWriteTimeout(getConnectionTimeout());</span><br><span class="line">        socketWrapper.setKeepAliveLeft(NioEndpoint.<span class="keyword">this</span>.getMaxKeepAliveRequests());</span><br><span class="line">        <span class="comment">// poller线程注册socket</span></span><br><span class="line">        poller.register(socketWrapper);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.error(sm.getString(<span class="string">&quot;endpoint.socketOptionsError&quot;</span>), t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable tt) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(tt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (socketWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            destroySocket(socket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Tell to close the socket if needed</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JDK源码阅读（一） IO包</title>
      <link href="/2021/11/04/JDK%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89-IO%E5%8C%85/"/>
      <url>/2021/11/04/JDK%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89-IO%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JDK版本：openjdk-8u41-b04-linux-x64</p><p>主要内容为基于JDK源码的学习，对<em>IO包</em>内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><p>本文会持续保持更新。</p><span id="more"></span><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p><img src="https://avriesl.github.io/images/jdk/image-20211104150314428.png" alt="image-20211104150314428"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">Closeable</span></span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">static</span> <span class="title">final</span> <span class="title">int</span> <span class="title">MAX_SKIP_BUFFER_SIZE</span> </span>= <span class="number">2048</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCat源码学习（一） MyCat启动</title>
      <link href="/2021/10/31/MyCat%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-MyCat%E5%90%AF%E5%8A%A8/"/>
      <url>/2021/10/31/MyCat%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-MyCat%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>MyCat版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.mycat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Mycat-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.7.6-release<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要内容为基于<a href="%5Bgithub.com%5D(https://github.com/MyCATApache/Mycat-Server)">MyCat</a>的学习，对<em>MyCatStartup.class</em>内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><p>本文会持续保持更新。</p><span id="more"></span><h1 id="MyCatStartup-class"><a href="#MyCatStartup-class" class="headerlink" title="MyCatStartup.class"></a>MyCatStartup.class</h1><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://avriesl.github.io/images/mysql/MycatStartup_main.png" alt="MyCat启动时序图"></p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置的时间格式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String dateFormat = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line"><span class="comment">// 日志</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MycatStartup.class);</span><br></pre></td></tr></table></figure><h2 id="Main方法"><a href="#Main方法" class="headerlink" title="Main方法"></a>Main方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyCatStartup.java</span></span><br><span class="line">ZkConfig.getInstance().initZk();</span><br></pre></td></tr></table></figure><p>首先在ZkConfig.java中存在静态块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ZkConfig.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Properties ZKPROPERTIES = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    ZKPROPERTIES = LoadMyidPropersites();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK_CONFIG_FILE_NAME = <span class="string">&quot;/myid.properties&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Properties <span class="title">LoadMyidPropersites</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个配置类</span></span><br><span class="line">    Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">// 创建一个输入流去读取文件myid.properties</span></span><br><span class="line">    <span class="keyword">try</span> (InputStream configIS = ZkConfig.class.getResourceAsStream(ZK_CONFIG_FILE_NAME)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (configIS == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 将流加载到配置类</span></span><br><span class="line">        pros.load(configIS);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;ZkConfig LoadMyidPropersites error:&quot;</span>, e);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;can&#x27;t find myid properties file : &quot;</span> + ZK_CONFIG_FILE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// validate</span></span><br><span class="line">    <span class="comment">// 获取配置文件中zk配制的url地址信息[zkURL]</span></span><br><span class="line">    String zkURL = pros.getProperty(ZkParamCfg.ZK_CFG_URL.getKey());</span><br><span class="line">    <span class="comment">// 获取配置文件中当前mycat节点的id[myid]</span></span><br><span class="line">    String myid = pros.getProperty(ZkParamCfg.ZK_CFG_MYID.getKey());</span><br><span class="line"><span class="comment">// 获取配置文件中集群的id[clusterId]</span></span><br><span class="line">    String clusterId = pros.getProperty(ZkParamCfg.ZK_CFG_CLUSTERID.getKey());</span><br><span class="line"><span class="comment">// 判断集群id/zk地址/当前节点id是否为空，若存在空，则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (Strings.isNullOrEmpty(clusterId) ||Strings.isNullOrEmpty(zkURL) || Strings.isNullOrEmpty(myid)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;clusterId and zkURL and myid must not be null or empty!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回配置文件</span></span><br><span class="line">    <span class="keyword">return</span> pros;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对LoadMyidPropersites方法的阅读，发现这个方法主要作用为<strong>加载myid.properties文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ZkConfig ZKCFGINSTANCE = <span class="keyword">new</span> ZkConfig();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZkConfig <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ZKCFGINSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getInstance方法主要作用为通过<strong>单例模式获取ZkConfig实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initZk</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取配置文件中的loadZk属性，判断是否启用zk</span></span><br><span class="line">        <span class="keyword">if</span> (Boolean.parseBoolean(ZKPROPERTIES.getProperty(ZkParamCfg.ZK_CFG_FLAG.getKey()))) &#123;</span><br><span class="line">            <span class="comment">// 调用ZktoXmlMain类的loadZktoFile方法</span></span><br><span class="line">            ZktoXmlMain.loadZktoFile();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;error:&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(十一) Innodb多版本并发控制-MVCC</title>
      <link href="/2021/08/19/MySQL-%E5%8D%81%E4%B8%80-Innodb%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6-MVCC/"/>
      <url>/2021/08/19/MySQL-%E5%8D%81%E4%B8%80-Innodb%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6-MVCC/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章演示环境为：MySQL5.7。</p><p>主要内容为基于<a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL5.7官方文档</a>的学习，对InnoDB MVCC相关内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><span id="more"></span><p>在上文<a href="https://avriesl.github.io/2021/08/18/MySQL-%E5%8D%81-InnoDB%E7%9A%84%E9%94%81/">MySQL(十) InnoDB的锁</a> 这一篇中 ，<br>我们提到使用锁来解决InnoDB的并发问题是有用的，但是仍然存在一个问题。</p><p>那就是不够高效，在InnoDB执行写操作的时候，仍会存在堵塞。</p><p>在MySQL中InnoDB通过数据多版本并发控制（MVCC）来解决了这个问题，这就是我们今天的主题。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>多版本并发控制（Multi-version concurrency control）：并发读写数据库时，对事务内正在操作的数据做多版本管理。从而避免写操作造成select堵塞。</p><p>MVCC是怎么避免写操作造成堵塞？</p><p>核心原理如下：</p><ol><li>写任务发生时，将数据克隆一份，以版本号区分；</li><li>写任务操作的数据为新克隆的数据，直到任务提交；</li><li>并发读任务可以继续读取旧数据，不会造成堵塞。</li></ol><p>从而解决了InnoDB写读并发的问题。</p><p>下面我们来具体看一下，InnoDB中具体是怎么实现的。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>InnoDB MVCC主要通过3个隐式字段、undo日志、Read View来实现的，下面我们逐个了解一下：</p><h2 id="隐式字段"><a href="#隐式字段" class="headerlink" title="隐式字段"></a>隐式字段</h2><p>从官方文档<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html">InnoDB Multi-Versioning</a> 中我们可以了解到，<br>在MySQL内部，InnoDB在每一行记录中添加了三个字段：</p><ul><li>DB_TRX_ID：6字节，该字段记录了最后一次insert、update该行的事务标记符（可以理解成事务id）</li><li>DB_ROLL_PTR：7字节，也叫回滚指针，该字段指向写入回滚段的undo log记录（也就是指向了该行的上个版本）</li><li>DB_ROW_ID：6字节，该字段在讲解索引那个篇章提到过，为InnoDB的隐含字段，记录了行id，在没有主键且没有合适的唯一索引时，作为聚集索引</li></ul><p>实际上还有一个delete的隐藏字段，用作记录该字段被删除。</p><h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>在<a href="https://avriesl.github.io/2021/08/16/MySQL-%E4%B8%89-MySQL%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/">MySQL(三) MySQL日志文件</a> 中，<br>曾提到过undo log，没有详细讲解。</p><p>undo log主要分为两种：</p><ul><li>insert undo log：仅在事务回滚时需要，并且可以在事务提交后立即丢弃。</li><li>update undo log：用于一致性读取，但只有在不存在InnoDB为其分配快照的事务时，对应日志才会被purge线程统一清理。</li></ul><h2 id="Read-View"><a href="#Read-View" class="headerlink" title="Read View"></a>Read View</h2><p>事务进行快照读操作的时候产生的读视图（Read View），在事务执行快照读的那一刻，会生成数据库当前的一个快照，记录并维护系统中当前活跃事务的id。</p><p>Read View的主要作用是用作可见性判断，当我们创建一个事务执行快照读的时候，同时也生成了一个Read View，它记录了当前事务在执行快照读那一刻的数据库数据。<br>这个数据可能是最新的，也可能是一个历史版本。</p><p>而我们创建的事务持有这个读视图（Read View），所以当前事务</p><h1 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h1><p>SQL读取的数据是历史版本（快照版本）</p><p>InnoDB为了提高并发效率，将数据的读取</p><h1 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h1><p>SQL读取的数据是最新版本</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 - MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(八) MySQL 优化汇总 （持续更新）</title>
      <link href="/2021/08/19/MySQL-%E5%85%AB-MySQL-%E4%BC%98%E5%8C%96%E6%B1%87%E6%80%BB-%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2021/08/19/MySQL-%E5%85%AB-MySQL-%E4%BC%98%E5%8C%96%E6%B1%87%E6%80%BB-%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章演示环境为：MySQL5.7。</p><p>主要内容为基于<a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL5.7官方文档</a>的学习，对MySQL优化相关内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><p>本文会持续保持更新。</p><span id="more"></span><h1 id="定位不合理索引"><a href="#定位不合理索引" class="headerlink" title="定位不合理索引"></a>定位不合理索引</h1><p>索引一般建立在离散度（字段值的重复程度越高，离散度越低）高的字段上，<br>通过这一点再结合<em>information_schema</em>数据库下的元数据表<em>TABLES</em>、<em>STATISTICS</em>就可以查询出当前数据库的各索引离散度。</p><p>SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> </span><br><span class="line">       t.TABLE_SCHEMA,</span><br><span class="line">       t.TABLE_NAME,</span><br><span class="line">       INDEX_NAME,</span><br><span class="line">       <span class="keyword">CARDINALITY</span>,</span><br><span class="line">       TABLE_ROWS,</span><br><span class="line">       <span class="keyword">CARDINALITY</span> <span class="operator">/</span> TABLE_ROWS <span class="keyword">AS</span> SELECTIVITY </span><br><span class="line">     <span class="keyword">FROM</span></span><br><span class="line">       information_schema.TABLES t,</span><br><span class="line">       (<span class="keyword">SELECT</span> </span><br><span class="line">         table_schema,</span><br><span class="line">         table_name,</span><br><span class="line">         index_name,</span><br><span class="line">         <span class="keyword">cardinality</span> </span><br><span class="line">       <span class="keyword">FROM</span></span><br><span class="line">         information_schema.STATISTICS </span><br><span class="line">       <span class="keyword">WHERE</span> (</span><br><span class="line">           table_schema,</span><br><span class="line">           table_name,</span><br><span class="line">           index_name,</span><br><span class="line">           seq_in_index</span><br><span class="line">         ) <span class="keyword">IN</span> </span><br><span class="line">         (<span class="keyword">SELECT</span> </span><br><span class="line">           table_schema,</span><br><span class="line">           table_name,</span><br><span class="line">           index_name,</span><br><span class="line">           <span class="built_in">MAX</span>(seq_in_index) </span><br><span class="line">         <span class="keyword">FROM</span></span><br><span class="line">           information_schema.STATISTICS </span><br><span class="line">         <span class="keyword">GROUP</span> <span class="keyword">BY</span> table_schema,</span><br><span class="line">           table_name,</span><br><span class="line">           index_name)) s </span><br><span class="line">     <span class="keyword">WHERE</span> t.table_schema <span class="operator">=</span> s.table_schema </span><br><span class="line">       <span class="keyword">AND</span> t.table_name <span class="operator">=</span> s.table_name </span><br><span class="line">       <span class="keyword">AND</span> t.table_rows <span class="operator">!=</span> <span class="number">0</span> </span><br><span class="line">       <span class="keyword">AND</span> t.table_schema <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">         <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;performance_schema&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;information_schema&#x27;</span></span><br><span class="line">       ) </span><br><span class="line">     <span class="keyword">ORDER</span> <span class="keyword">BY</span> SELECTIVITY ;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+------------+-------------+------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> TABLE_SCHEMA <span class="operator">|</span> TABLE_NAME  <span class="operator">|</span> index_name <span class="operator">|</span> <span class="keyword">cardinality</span> <span class="operator">|</span> TABLE_ROWS <span class="operator">|</span> SELECTIVITY <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+------------+-------------+------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> testzc       <span class="operator">|</span> student     <span class="operator">|</span> zhsy       <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span>      <span class="number">1.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> testzc       <span class="operator">|</span> user_memory <span class="operator">|</span> <span class="keyword">PRIMARY</span>    <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span>      <span class="number">1.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys          <span class="operator">|</span> sys_config  <span class="operator">|</span> <span class="keyword">PRIMARY</span>    <span class="operator">|</span>           <span class="number">6</span> <span class="operator">|</span>          <span class="number">6</span> <span class="operator">|</span>      <span class="number">1.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> testzc       <span class="operator">|</span> user_innodb <span class="operator">|</span> <span class="keyword">PRIMARY</span>    <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span>      <span class="number">1.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> testzc       <span class="operator">|</span> user_myisam <span class="operator">|</span> <span class="keyword">PRIMARY</span>    <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span>      <span class="number">1.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> testzc       <span class="operator">|</span> student     <span class="operator">|</span> <span class="keyword">PRIMARY</span>    <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span>      <span class="number">1.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> testzc       <span class="operator">|</span> user_innodb <span class="operator">|</span> index_name <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span>      <span class="number">1.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+------------+-------------+------------+-------------+</span></span><br></pre></td></tr></table></figure><p>查询结果中cardinality/TABLE_ROWS越小就代表该索引字段重复度越高。<br>SELECTIVITY越高就代表该索引字段离散度越高。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(七) MySQL 执行计划</title>
      <link href="/2021/08/19/MySQL-%E4%B8%83-MySQL-%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
      <url>/2021/08/19/MySQL-%E4%B8%83-MySQL-%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章演示环境为：MySQL5.7。</p><p>主要内容为基于<a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL5.7官方文档</a>的学习，对MySQL执行计划相关内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><span id="more"></span><p><strong>EXPLAIN查看的是执行计划，用做SQL解析，不会真的去执行。</strong></p><h1 id="EXPLAIN的使用"><a href="#EXPLAIN的使用" class="headerlink" title="EXPLAIN的使用"></a>EXPLAIN的使用</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> userid, username, pwd <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid <span class="operator">=</span> <span class="number">1</span>\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">id: <span class="number">1</span>                                   <span class="comment">-- 执行计划的id</span></span><br><span class="line">select_type: SIMPLE                     <span class="comment">-- select的类型</span></span><br><span class="line"><span class="keyword">table</span>: <span class="keyword">user</span>                             <span class="comment">-- 输出记录的表</span></span><br><span class="line">partitions: <span class="keyword">NULL</span>                        <span class="comment">-- 匹配的分区</span></span><br><span class="line">type: <span class="keyword">ALL</span>                               <span class="comment">-- join的类型</span></span><br><span class="line">possible_keys: <span class="keyword">NULL</span>                     <span class="comment">-- 优化器可能选择的索引</span></span><br><span class="line">key: <span class="keyword">NULL</span>                               <span class="comment">-- 优化器实际选择的索引</span></span><br><span class="line">key_len: <span class="keyword">NULL</span>                           <span class="comment">-- 使用索引的字节长度</span></span><br><span class="line"><span class="keyword">ref</span>: <span class="keyword">NULL</span>                               <span class="comment">-- 进行比较的索引列</span></span><br><span class="line"><span class="keyword">rows</span>: <span class="number">3</span>                                 <span class="comment">-- 优化器预估查询的记录数量</span></span><br><span class="line">filtered: <span class="number">33.33</span>                         <span class="comment">-- 根据条件过滤得到的记录占中路的百分比</span></span><br><span class="line">Extra: <span class="keyword">Using</span> <span class="keyword">where</span>                      <span class="comment">-- 额外信息</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> warnings\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> `testzc`.`<span class="keyword">user</span>`.`userid` <span class="keyword">AS</span> `userid`,`testzc`.`<span class="keyword">user</span>`.`username` <span class="keyword">AS</span> `username`,`testzc`.`<span class="keyword">user</span>`.`pwd` <span class="keyword">AS</span> `pwd` <span class="keyword">from</span> `testzc`.`<span class="keyword">user</span>` <span class="keyword">where</span> (`testzc`.`<span class="keyword">user</span>`.`userid` <span class="operator">=</span> <span class="number">1</span>)</span><br><span class="line">    <span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="EXTENDED参数"><a href="#EXTENDED参数" class="headerlink" title="EXTENDED参数"></a>EXTENDED参数</h2><p>功能：启用扩展输出。</p><p>现在默认启用扩展输出，EXTENDED参数即将被弃用，在执行EXPLAIN时可以不使用该参数。</p><h2 id="FORMAT参数"><a href="#FORMAT参数" class="headerlink" title="FORMAT参数"></a>FORMAT参数</h2><p>功能：格式化EXPLAIN的输出结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain format<span class="operator">=</span>json <span class="keyword">select</span> userid, username, pwd <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid <span class="operator">=</span> <span class="number">1</span>\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">EXPLAIN: &#123;</span><br><span class="line">    &quot;query_block&quot;: &#123;</span><br><span class="line">        &quot;select_id&quot;: <span class="number">1</span>,</span><br><span class="line">        &quot;cost_info&quot;: &#123;</span><br><span class="line">            &quot;query_cost&quot;: &quot;1.60&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;table&quot;: &#123;</span><br><span class="line">            &quot;table_name&quot;: &quot;user&quot;,</span><br><span class="line">            &quot;access_type&quot;: &quot;ALL&quot;,</span><br><span class="line">            &quot;rows_examined_per_scan&quot;: <span class="number">3</span>,</span><br><span class="line">            &quot;rows_produced_per_join&quot;: <span class="number">1</span>,</span><br><span class="line">            &quot;filtered&quot;: &quot;33.33&quot;,</span><br><span class="line">            &quot;cost_info&quot;: &#123;</span><br><span class="line">                &quot;read_cost&quot;: &quot;1.40&quot;,</span><br><span class="line">                &quot;eval_cost&quot;: &quot;0.20&quot;,</span><br><span class="line">                &quot;prefix_cost&quot;: &quot;1.60&quot;,</span><br><span class="line">                &quot;data_read_per_join&quot;: &quot;288&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;used_columns&quot;: [</span><br><span class="line">                &quot;userid&quot;,</span><br><span class="line">                &quot;username&quot;,</span><br><span class="line">                &quot;pwd&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;attached_condition&quot;: &quot;(`testzc`.`user`.`userid` = 1)&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="EXPLAIN输出详解"><a href="#EXPLAIN输出详解" class="headerlink" title="EXPLAIN输出详解"></a>EXPLAIN输出详解</h1><p>下面是官网对EXPLAIN输出的详解：</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html">EXPLAIN Output Format</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(十) InnoDB的锁</title>
      <link href="/2021/08/18/MySQL-%E5%8D%81-InnoDB%E7%9A%84%E9%94%81/"/>
      <url>/2021/08/18/MySQL-%E5%8D%81-InnoDB%E7%9A%84%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章演示环境为：MySQL5.7。</p><p>主要内容为基于<a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL5.7官方文档</a>的学习，对InnoDB锁相关内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><span id="more"></span><h1 id="InnoDB并发"><a href="#InnoDB并发" class="headerlink" title="InnoDB并发"></a>InnoDB并发</h1><p>回顾上一篇<a href="https://avriesl.github.io/2021/08/18/MySQL-%E4%B8%83-InnoDB%E4%BA%8B%E5%8A%A1%E7%89%B9%E6%80%A7/">MySQL(九) InnoDB事务特性</a><br>中提到过事务具有四大特性<strong>ACID</strong>，原子性、一致性、隔离性和持久性。</p><p>当在数据库中，并发任务对同一份临界资源进行操作的时候，如果不对其采取措施，那么很可能导致数据不一致，违反了一致性原则。</p><p>那么，如何对并发该采取哪些措施呢？</p><p>常见措施有：</p><ul><li>锁（Locking）</li><li>数据多版本（Multi-Versioning）</li></ul><p>而本篇文章主要介绍锁。</p><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>在InnoDB共有七种类型的锁：</p><ol><li>共享/排他锁（Shared and Exclusive Locks）</li><li>意向锁（Intention Locks）</li><li>记录锁（Record Locks）</li><li>间隙锁（Gap Locks）</li><li>临键锁（Next-Key Locks）</li><li>插入意向锁（Insert Intention Locks）</li><li>自增锁（AUTO-INC Locks）</li></ol><blockquote><p>其实还有个谓词锁，是InnoDB专门针对空间索引的，本文不讲，有兴趣的可以去官网查看<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html">InnoDB Locking</a></p></blockquote><h2 id="共享-排他锁（Shared-and-Exclusive-Locks）"><a href="#共享-排他锁（Shared-and-Exclusive-Locks）" class="headerlink" title="共享/排他锁（Shared and Exclusive Locks）"></a>共享/排他锁（Shared and Exclusive Locks）</h2><p>怎么使用锁来控制并发呢？</p><p>正常使用锁的步骤一般如下：</p><ol><li>操作数据前，锁住待操作记录；</li><li>操作完成后，释放锁。</li></ol><p>虽然这样确实保证了一致性，但是在多并发情况下，这样的执行过程本质上是串行了。</p><p>于是InnoDB提供了<strong>共享锁</strong>和<strong>排他锁</strong>：</p><ul><li>共享锁（Share Locks）：记为S锁，在读取数据的时候记录行添加S锁；</li><li>排他锁（Exclusive Locks）：记为X锁，在修改数据的时候记录行添加X锁。</li></ul><p>用法：</p><ul><li>共享锁之间不互斥，即：读读可并行；</li><li>排他锁与任何锁互斥，即：写读、写写不可并行；</li></ul><blockquote><p>共享/排他锁存在一个潜在问题，那就是在写操作未执行完成的情况下，select操作仍会被阻塞。<br>这个问题的解决思路就是数据多版本控制（下一篇会对此详细讲解）。</p></blockquote><h2 id="意向锁（Intention-Locks）"><a href="#意向锁（Intention-Locks）" class="headerlink" title="意向锁（Intention Locks）"></a>意向锁（Intention Locks）</h2><p><strong>意向锁</strong>：在事务可能要加共享/排他锁前，先提前声明一个意向。</p><p>特点：</p><ol><li>表级锁</li><li>意向锁分为：<ul><li>意向共享锁（Intention shared lock）：记为IS锁，代表事务有意对表中某些行加S锁；</li><li>意向排他锁（Intention exclusive lock）：记为IX锁，代表事务有意对表中某些行加X锁。</li></ul></li><li>协议：<ul><li>事务要获取某些行的S锁，必须先获取表的IS锁；</li><li>事务要获取某些行的X锁，必须先获取表的IX锁。</li></ul></li><li>意向锁之间并不互斥，可以并行。</li><li>意向锁与共享/排他锁之间存在兼容互斥关系：<ul><li>共享锁（S锁）与意向共享锁（IS锁）之间不互斥；</li><li>排他锁（X锁）与意向排他锁（IX锁）与其他锁互斥。</li></ul></li></ol><p>通过以上描述可能只是对<strong>意向锁</strong>的概念有所了解，具体作用可能还是有点懵。那么，接下来我们看个例子：</p><p>假设存在一个表user(userid PK, username, pwd)，表内记录如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> userid <span class="operator">|</span> username <span class="operator">|</span> pwd      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span> Laim     <span class="operator">|</span> <span class="number">123</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span> avriesl  <span class="operator">|</span> <span class="number">12345</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span> Laim     <span class="operator">|</span> illusion <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+----------+</span></span><br></pre></td></tr></table></figure><p>首先，<strong>事务A</strong>执行SQL语句：update user set username = ‘Laim123’ where userid = 1;<br><strong>事务A</strong>更新语句执行完成后，不提交事务。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务A</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> update <span class="keyword">user</span> <span class="keyword">set</span> username <span class="operator">=</span> <span class="string">&#x27;Laim123&#x27;</span> <span class="keyword">where</span> userid <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>随后，<strong>事务B</strong>执行SQL语句：select * from user where username = ‘avriesl’ for update;<br><strong>事务B</strong>会被夯住。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务B</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;avriesl&#x27;</span> <span class="keyword">for</span> update;</span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; try restarting transaction</span><br></pre></td></tr></table></figure><p>我们来跟着上面例子的结果来分析一遍，</p><p>假如没有意向锁情况：</p><ol><li>事务A中在执行更新语句时，会为userid=1这行添加了一个<strong>X锁</strong>。</li><li>事务B在执行select * from user where username = ‘avriesl’ for update时（username没有索引，select查询会查询全表），<br>事务B不知道表内是否有数据正在修改，于是开始逐步对表内行记录添加<strong>S锁</strong>，当加到userid=1这行时，发现该行记录存在<strong>X锁</strong>，于是互斥阻塞。</li></ol><p>这样分析看着与上面例子的结果符合，但是思考一下，这种方式有没有什么问题？</p><ol><li>表内数据过多，查询全表时每行均需要添加<strong>S锁</strong>，会很浪费资源；</li><li>若此时再来个事务，对全表扫描，那么又会对其他记录添加<strong>S锁</strong>。</li></ol><p>所以在若没有意向锁，那么在高并发读写的情况下，数据库会因为频繁加锁、释放锁从而导致消耗大量资源</p><p>存在意向锁情况：</p><ol><li>事务A中在执行更新语句时，会现在user表上添加<strong>IX锁</strong>，再为userid=1这行添加了一个<strong>X锁</strong>。</li><li>事务B在执行select * from user where username = ‘avriesl’ for update时，检查到user表上存在<strong>IX锁</strong>，因为<strong>S锁</strong>与<strong>IX锁</strong>互斥，于是阻塞。</li></ol><p>这样就避免了在实现锁表的时候对表内所有记录添加行锁，从而浪费资源。</p><h2 id="记录锁（Record-Locks）"><a href="#记录锁（Record-Locks）" class="headerlink" title="记录锁（Record Locks）"></a>记录锁（Record Locks）</h2><p><strong>记录锁</strong>：记录锁的对象是索引记录。</p><p>例如：select * from user where id = 1 for update;</p><p>它会在id=1的索引上加锁，从而阻止其他事务来插入、更新、删除id=1这一行。</p><blockquote><p>InnoDB中，select * from user where id = 1是快照读，不加锁。</p></blockquote><h2 id="间隙锁（Gap-Locks）"><a href="#间隙锁（Gap-Locks）" class="headerlink" title="间隙锁（Gap Locks）"></a>间隙锁（Gap Locks）</h2><p><strong>间隙锁</strong>：间隙锁的对象是索引记录的间隔，即索引叶子节点中的前驱与后继引用。</p><p>例如：select * from user where id between 2 and 4 for update;</p><p>它会在区间1,2、2,3、3,4、4,5进行加锁，从而防止其他事务在间隔中插入数据。</p><h2 id="临键锁（Next-Key-Locks）"><a href="#临键锁（Next-Key-Locks）" class="headerlink" title="临键锁（Next-Key Locks）"></a>临键锁（Next-Key Locks）</h2><p><strong>临键锁</strong>：临键锁即是<strong>记录锁与间隙锁的组合</strong>，同时对索引记录、索引区间进行了加锁处理。</p><p>临键锁主要作用就是用来解决当前读的幻读问题。</p><h2 id="插入意向锁（Insert-Intention-Locks）"><a href="#插入意向锁（Insert-Intention-Locks）" class="headerlink" title="插入意向锁（Insert Intention Locks）"></a>插入意向锁（Insert Intention Locks）</h2><p><strong>插入意向锁</strong>：插入意向锁是间隙锁的一种，实际上也是在索引上操作的。</p><p>它的作用是：多个事物在同一索引、同一范围插入记录时，如果插入位置不冲突，则不会发生阻塞。</p><p>例如：</p><p>在执行insert into user(3, ‘Laim’, ‘123’)语句时，会在2,3、3,4这两个区间进行加锁。<br>若此时另一个事务也在插入数据，只要它插入的数据不是2,3、3,4这两个区间，就不会发生互斥。</p><h2 id="自增锁（AUTO-INC-Locks）"><a href="#自增锁（AUTO-INC-Locks）" class="headerlink" title="自增锁（AUTO-INC Locks）"></a>自增锁（AUTO-INC Locks）</h2><p><strong>自增锁</strong>：自增锁是一种特殊的表级锁，专门针对事务插入AUTO_INCREMENT类型的列。当有事务正在插入AUTO_INCREMENT列时，其他事务的插入必须等待。</p><blockquote><p>本文中提到的快照读、当前读，在下一篇文章中会详细讲解<a href="">MySQL(十一) Innodb多版本并发控制-MVCC</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(九) InnoDB事务特性</title>
      <link href="/2021/08/18/MySQL-%E4%B9%9D-InnoDB%E4%BA%8B%E5%8A%A1%E7%89%B9%E6%80%A7/"/>
      <url>/2021/08/18/MySQL-%E4%B9%9D-InnoDB%E4%BA%8B%E5%8A%A1%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章演示环境为：MySQL5.7。</p><p>主要内容为基于<a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL5.7官方文档</a>的学习，对MySQL事务特性相关内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><span id="more"></span><p>MySQL5.5版本以后，默认存储引擎从MyISAM更改为了InnoDB，下文针对事务的讲解均是基于InnoDB存储引擎。</p><blockquote><p>MySQL5.5版本以前，默认存储引擎为MyISAM，该存储引擎不支持事务，对于表的并发操作，是通过锁来处理的。</p></blockquote><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p><strong>事务</strong>：数据库的最小工作单元，事务是一组不可分隔的操作集合。</p><p>举个例子：转账</p><p>张三向李四转账1000元，这个操作是不可分隔的，是一个最基本的单元。<br>要么张三扣了1000元，李四加上1000元；要么张三不扣1000元，李四不加1000元。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update user_account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> &quot;张三&quot;;</span><br><span class="line">update user_account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> &quot;李四&quot;;</span><br></pre></td></tr></table></figure><p>MySQL 开启事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span><span class="operator">/</span><span class="keyword">START</span> TRANSACTION ;   <span class="comment">--手动开启事务</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="operator">/</span><span class="keyword">ROLLBACK</span> ;           <span class="comment">--提交/回滚事务</span></span><br><span class="line"><span class="keyword">SET</span> SESSION autocommit <span class="operator">=</span> <span class="keyword">ON</span><span class="operator">/</span>OFF <span class="comment">--设定会话级别事务是否自动开启</span></span><br></pre></td></tr></table></figure><p>MySQL默认是开启事务的，可以通过如下命令查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> autocommit    <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br></pre></td></tr></table></figure><ul><li>在<em>autocommit=ON</em>（自动提交事务）的情况下，可以执行<em>begin transaction</em>或者<em>start transaction</em>来改变为手动提交事务，在执行完sql操作后，需要手动执行<em>commit</em>或者<em>rollback</em>来手动提交或者回滚。</li><li>在<em>autocommit=OFF</em>（手动提交事务）的情况下，执行完sql操作后，需手动执行<em>commit</em>或者<em>rollback</em>来手动提交或者回滚。</li></ul><h1 id="事务的四大特性：ACID"><a href="#事务的四大特性：ACID" class="headerlink" title="事务的四大特性：ACID"></a>事务的四大特性：ACID</h1><p>事务具有4个特征，分别是原子性、一致性、隔离性和持久性，简称事务的ACID特性。</p><h2 id="原子性（atomicity）"><a href="#原子性（atomicity）" class="headerlink" title="原子性（atomicity）"></a>原子性（atomicity）</h2><p>一个事务要么全部提交成功，要么全部失败回滚，不能只执行其中的一部分操作。</p><p>一个事务要么全部提交成功，要么全部失败回滚，成功或失败取决于我们最后是commit还是rollback，而不是事务中有执行错误的语句，事务便会回滚。</p><h2 id="一致性（consistency）"><a href="#一致性（consistency）" class="headerlink" title="一致性（consistency）"></a>一致性（consistency）</h2><p>事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。</p><p>如果数据库系统在运行过程中发生故障，有些事务尚未完成就被迫中断，这些未完成的事务对数据库所作的修改有一部分已写入物理数据库，这是数据库就处于一种不正确的状态，也就是不一致的状态</p><blockquote><p>那MYSQL怎么实现一致性的呢？</p><p>MySql通过实现AID(原子性、隔离性、持久性)来实现一致性，可以理解为AID只是手段，而一致性是目的。</p></blockquote><h2 id="隔离性（isolation）"><a href="#隔离性（isolation）" class="headerlink" title="隔离性（isolation）"></a>隔离性（isolation）</h2><p>多个事务并发执行的情况下，系统保障事务并发执行的结果，与串行执行的结果一致。</p><h2 id="持久性（durability）"><a href="#持久性（durability）" class="headerlink" title="持久性（durability）"></a>持久性（durability）</h2><p>一旦事务提交，那么它对数据库中的对应数据的状态的变更就会永久保存到数据库中。</p><blockquote><p>一致性与原子性的区别</p><p>一致性强调的是数据库的整体状态，一个事务执行后，数据库要么是执行后的最终状态，要么是执行前的状态。</p><p>而原子性强调的是事务执行操作的完整性，一个事务执行时要么全执行，要么全不执行。</p></blockquote><h1 id="事务并发带来的问题"><a href="#事务并发带来的问题" class="headerlink" title="事务并发带来的问题"></a>事务并发带来的问题</h1><p>加上存在一个表user_innodb，表内数据如下：</p><p><a href="https://avriesl.gitee.io/img/image-20200906174431828.png">gitee innodb 1</a></p><h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><p>比如user表中有一条用户数据，执行了如下操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- A、B窗口</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="comment">-- 查看user表数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A窗口</span></span><br><span class="line"><span class="comment">-- 更新user表数据</span></span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> pwd<span class="operator">=</span>&quot;123456&quot; <span class="keyword">where</span> username<span class="operator">=</span>&quot;Laim&quot;;</span><br><span class="line"><span class="comment">-- 查看user表数据，数据发生了改变</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B窗口</span></span><br><span class="line"><span class="comment">-- 查看user表数据，发现数据也发生了改变</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><strong>A窗口</strong></p><p><a href="https://avriesl.gitee.io/img/image-20200906175215222.png">脏读 a</a></p><p><strong>B窗口</strong></p><p><a href="https://avriesl.gitee.io/img/image-20200906175228593.png">脏读 b</a></p><p>结果发现窗口B中Laim对应的pwd变为了123456，但窗口A并未提交事务。</p><p>现象为未提交事务A对事务B产生了影响，导致<strong>事务B读取到了事务A未提交的操作记录</strong>，这就是<strong>脏读</strong>。</p><h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- A、B窗口</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="comment">-- 查看user表数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A窗口</span></span><br><span class="line"><span class="comment">-- 更新user表数据</span></span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> pwd<span class="operator">=</span>&quot;123456&quot; <span class="keyword">where</span> username<span class="operator">=</span>&quot;Laim&quot;;</span><br><span class="line"><span class="comment">-- 查看user表数据，数据发生了改变</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B窗口</span></span><br><span class="line"><span class="comment">-- 查看user表数据，发现数据也发生了改变</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><strong>A窗口</strong></p><p><a href="https://avriesl.gitee.io/img/image-20200906180744466.png">不可重复度 a</a></p><p><strong>B窗口</strong></p><p><a href="https://avriesl.gitee.io/img/image-20200906180814559.png">不可重复读 b</a></p><p>结果发现在窗口A提交事务后，窗口B中Laim对应的pwd变为了123456。</p><p>现象为已提交事务A对事务B产生了影响，导致在<strong>同一个事务内的相同查询，得到了不同结果</strong>，这就是<strong>不可重复读</strong></p><h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- A、B窗口</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="comment">-- 查看user表数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A窗口</span></span><br><span class="line"><span class="comment">-- 插入一条数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span> (<span class="number">3</span>,&quot;Laim&quot;,&quot;illusion&quot;);</span><br><span class="line"><span class="comment">-- 查看user表数据，数据已经发生了改变</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B窗口，查询的数据条数发生了改变</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><strong>窗口A</strong></p><p><img src="https://avriesl.github.io/images/mysql/huandu_a.png" alt="img.png"></p><p><strong>窗口B</strong></p><p><img src="https://avriesl.github.io/images/mysql/huandu_b.png" alt="img_1.png"></p><p>结果发现在窗口A提交事务后，窗口B中查询时结果增加了一条。</p><p>现象为已提交事务A对事务B产生了影响，导致<strong>事务B的查询结果条数发生了变化</strong>，这就是<strong>幻读</strong></p><h1 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h1><p><a href="https://avriesl.gitee.io/img/1646034-20190430095830286-1397235000.png">事务的隔离级别</a></p><ol><li>读未提交（Read Uncommitted）</li></ol><p>所有事务都可以查询到其他未提交事务的执行结果。</p><p>事务间相互均可见。</p><p><strong>实现策略</strong></p><p>select语句不加锁，导致事务操作记录时，其他事务可能读取到不一致的数据。</p><p><strong>未解决任何并发问题</strong></p><p>这是MySQL并发最高的隔离级别，但是一致性却是最差的。</p><ol start="2"><li>读提交（Read Committed）</li></ol><p>事务只能看见已经提交事务所做的改变。</p><p>提交后的事务操作可见。</p><p><strong>实现策略</strong></p><ol><li>普通读是快照读</li><li>加锁的select、update、delete等语句，除了在外键约束检查以及重复键检查时会封锁区间，其他时候只使用记录锁。</li></ol><p><strong>解决了脏读问题</strong></p><p>当其他事务插入或修改时，仍可能出现<strong>不可重复读</strong>与<strong>幻读</strong>。</p><ol start="3"><li>可重复读（Repeatable Read）</li></ol><p>MySQL的默认事务隔离级别，确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。</p><p><strong>实现策略</strong></p><ol><li>普通的select使用快照读，这是一种不加锁的一致性读</li><li>加锁的select（select … in share mode/select … for update）、update、delete等语句，它们的锁依赖于以下几点：<ul><li>在唯一索引上使用了唯一查询条件：会使用记录锁，而不会使用间隙锁与临键锁</li><li>范围查询：会使用间隙锁与临键锁</li></ul></li></ol><blockquote><p>关于第二点，举个例子解释一下：</p><p>第一种情况，即在唯一索引上使用了唯一查询条件，<br>例如存在一个表user(id PK, name)，<br>字段id是主键索引（主键索引就是一种特殊的唯一索引），其索引的离散度一定为1（即没有重复值）<br>若我们执行SQL语句：select id, name from user where id = 1 for update;<br>在RR隔离级别下，InnoDB会在id=1对应的行记录上，添加一把记录锁，<br>由于我们操作的行记录仅有id=1这一行，不会发生幻读，所以仅添加记录锁，防止脏读与不可重复读，无需再使用间隙锁与临键锁。</p><p>第二种情况，即范围查询，<br>同样，例如存在一个表user(id PK, name)，字段id是主键索引<br>若我们执行SQL语句：select id, name from user where id &lt; 3 for update;<br>在RR隔离级别下，InnoDB会在区间-infinity, 1、1, 2、2, 3这几个区间添加临键锁，以防止不可重复读与幻读。 </p></blockquote><p><strong>解决了不可重复读问题</strong></p><ol start="4"><li>串行化（Serializable）</li></ol><p>最高的隔离级别，它通过强制事务排序，使之不可能相互冲突。</p><p><strong>实现策略</strong></p><p>所有select语句均会被隐式转换为select … in share mode;</p><p>这会导致所有读取未提交事务正在操作的行的select都会被堵塞。</p><p><strong>解决了幻读问题</strong></p><p>这是一致性最好的隔离级别，但却是并发性最差的。</p><blockquote><p>关于本文中提到的锁，可查看下一篇文章<a href="https://avriesl.github.io/2021/08/18/MySQL-%E5%8D%81-InnoDB%E7%9A%84%E9%94%81/">MySQL(十) InnoDB的锁</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(六) MySQL索引</title>
      <link href="/2021/08/17/MySQL-%E5%85%AD-MySQL%E7%B4%A2%E5%BC%95/"/>
      <url>/2021/08/17/MySQL-%E5%85%AD-MySQL%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章演示环境为：MySQL5.7。</p><p>主要内容为基于<a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL5.7官方文档</a>的学习，对MySQL索引相关内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><span id="more"></span><p>数据是以文件的形式存放在磁盘上面的，每一行数据都有它的磁盘地址。</p><p>假设我们需要从500万行数据里面检索一条数据，那么只能依次遍历这张表的全部数据（循环调用存储引擎的读取下一行数据的接口），直到找到这条数据。</p><p>所以我们需要某样东西来提高我们的查询效率 <strong>索引</strong></p><p>当我们有了索引之后，只需要在索引里面去检索这条数据就行了，因为索引它是一种特殊的专门用来快速检索的数据结构，我们找到数据存放的磁盘地址以后，<br>就可以拿到数据了。</p><h1 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h1><p>在InnoDB中，索引共有三种，普通索引、唯一索引（主键索引是一种特殊的唯一索引）、全文索引。</p><ul><li>普通索引（Normal）: 也叫非唯一索引，是最普通的索引，没有任何的限制。</li><li>唯一索引（Unique）：唯一索引要求键值不能重复。另外需要注意的是，主键索引是一种特殊的唯一索引，它还多了一个限制条件，要求键值不能为空。主键索引用 primay key创建。</li><li>全文索引（Fulltext）：针对比较大的数据，比如我们存放的是消息内容，有几KB的数据的这种情况， 如果要解决like查询效率低的问题，可以创建全文索引。只有文本类型的字段才可以创建全文索引，比 如 char、varchar、text。</li></ul><p><strong>注意：</strong></p><p>每个InnoDB表中都有一个被称为<strong>聚集索引</strong>的特殊索引，用于存储行数据</p><p>聚集索引的目的是为了在查询、插入等数据库操作时获得最佳的性能</p><ul><li>当表中定义有主键时，InnoDB将定义为主键的字段作为聚集索引</li><li>当表中未定义有主键时，InnoDB则使用第一个唯一索引，并将这个唯一索引的字段定义为not null来作为聚集索引</li><li>当表中未定义有主键，且也未有合适的唯一索引时，InnoDB生成以<em>GEN_CLUST_INDEX</em>命名，包含行ID值的列来作为隐藏的聚集索引</li></ul><blockquote><p>行ID是一个6字节的字段，会随着插入新行而增加。</p><p>按行ID排序，在物理上就是按插入顺序排列。</p></blockquote><h1 id="索引的存储模型"><a href="#索引的存储模型" class="headerlink" title="索引的存储模型"></a>索引的存储模型</h1><p>因为索引是一种特殊的专门用来<strong>快速检索</strong>的<strong>数据结构</strong></p><p>那么假想一下：存在着一组数据，需要我们人为去检索它，我们会用什么方法？</p><h2 id="存储模型推导"><a href="#存储模型推导" class="headerlink" title="存储模型推导"></a>存储模型推导</h2><p><strong>二分法</strong></p><p>也就是二分查找，我们需要先将这组数据排序，每一次从中间选择数据比较，来判断下一次取左半区，还是右半区继续查找，<br>这样，每一次，我们都能把候选数据缩小了一半。</p><p>所以如果通过二分法去检索这组数据，我们用到的索引就是一个<strong>有序数组</strong>形式的数据结构</p><p>但是有序数组在更新的时候存在一个问题，可能要挪动大量的数据（改变 index），所以只适合存储静态的数据。</p><p>所以为了支持频繁的修改，比如插入数据，我们需要采用<strong>链表</strong>，一种<strong>支持二分查找的链表</strong>。</p><p><strong>二叉查找树（BST Binary Search Tree）</strong></p><p><img src="https://avriesl.github.io/images/mysql/bst.png" alt="Binary Search Tree"></p><p>二叉查找树的特点是什么？<br>左子树所有的节点都小于父节点，右子树所有的节点都大于父节点。投影到平面以后，就是一个有序的线性表。</p><p>二叉查找树既能够实现快速查找，又能够实现快速插入。</p><p>但是二叉查找树有一个问题：就是它的查找耗时是和这棵树的深度相关的，在最坏的情况下时间复杂度会退化成O(n)。</p><p><img src="https://avriesl.github.io/images/mysql/bad-bst.png" alt="Bad Binary Search Tree"></p><p>如果我们插入的数据刚好是有序的，5、7、12、14、17、 25。 这个时候二叉查找树变成了什么样了呢？<br>它会变成链表（我们把这种树叫做“斜树”），这种情况下不能达到加快检索速度的目的，和顺序查<br>找效率是没有区别的。</p><p>因为左右子树深度差太大，这棵树的左子树根本没有节点——也就是它不够平衡。 所以我们需要一种<strong>左右子树深度相差不大的树</strong>。</p><p><strong>平衡二叉树（AVL Tree）</strong></p><p><img src="https://avriesl.github.io/images/mysql/AVL-Tree.png" alt="AVL Tree"></p><p>平衡二叉树的定义：左右子树深度差绝对值不能超过 1。</p><p>这个时候我们再按顺序插入 1、2、3、4、5、6，一定是这样，不会变成一棵“斜树”。</p><p>所以为了保持平衡，AVL树在插入和更新数据的时候执行了一系列的计算和调整的操作。</p><p>现在平衡的问题解决了，那么AVL树可以被作为索引使用了么？</p><p>首先，在平衡二叉树中，一个节点它的大小是一个固定的单位</p><p>它应该存储三块的内容：</p><ol><li>索引的键值。比如我们在 id 上面创建了一个索引，我在用 where id =1 的条件查询的时候 就会找到索引里面的 id 的这个键值。</li><li>数据的磁盘地址，因为索引的作用就是去查找数据的存放的地址。</li><li>左子节点和右子节点的引用，用于找到下一个节点。比如大于 26 的时候，走右边，到下一个树的节点，继续判断。</li></ol><p>如果是这样存储数据的话，对于人为操作数据的我们没有什么问题了。</p><p>如果作为数据库索引使用，我们来看一下会有什么问题。</p><p>首先，对于InnoDB来说，索引的数据是放在硬盘上的。<br>如果使用AVL树作为索引的话，访问一个节点就要跟磁盘之间发生一次I/O。<br>InnoDB操作磁盘的最小的单位是一页（或者叫一个磁盘块），大小是16K(16384 字节)。</p><p>那么，一个树的节点就是16K的大小。<br>如果我们一个节点只存一个键值+数据+引用，例如整形的字段，可能只用了十几个或者几十个字节，<br>它远远达不到16384字节的容量，所以访问一个树节点，进行一次IO的时候，浪费了大量的空间。</p><p>同时每个节点存储的数据太少，从索引中找到我们需要的数据，就要访问更多的节点，意味着 跟磁盘交互次数就会过多，消耗的时间也越多。</p><p>所以在AVL树的基础上，我们需要它每个节点存储更多数据，不仅仅包含左右子节点的引用、不仅仅包含单个数据的磁盘地址。<br>所以我们需要一种<strong>多叉，或者叫做多路</strong>的树。</p><p><strong>多路平衡查找树（B Tree）</strong></p><p>Balanced Tree，也就是多路平衡查找树，通常叫做B Tree</p><p>它的特点是：分叉数（路数）永远比关键字数多 1。比如我们画的这棵树，每个节点存储两个关键字，那么就会有三个指针指向三个子节点。</p><p><img src="https://avriesl.github.io/images/mysql/B-Tree.png" alt="B Tree"></p><p>这样我们就得到了一个具有<strong>快速检索、树形结构、平衡、多路</strong>等特性的树，一种适合作为数据库索引的数据结构。</p><p><strong>加强版多路平衡查找树（B+ Tree）</strong></p><p>在InnoDB中，索引的数据结构是B+ Tree</p><p>通过我们前面的分析，B Tree的效率已经很高了，为什么MySQL还要对B Tree进行改良呢？</p><p><img src="https://avriesl.github.io/images/mysql/B+Tree.png" alt="B+ Tree"></p><p>上图为InnoDB里面的B+树的存储结构，B+树具有两个特点：</p><ol><li>它的关键字的数量是跟路数相等的；</li><li>B+Tree的根节点和枝节点中都不会存储数据，只有叶子节点才存储数据。</li></ol><p>为什么InnoDB要做这样的改良？</p><ol><li>B+Tree是B Tree的变种，B Tree能解决的问题，它都能解决。B Tree解决的两大问题是什么？（每个节点存储更多关键字；路数更多）</li><li>扫库、扫表能力更强（如果我们要对表进行全表扫描，只需要遍历叶子节点就可以了，不需要遍历整棵树，才能拿到所有的数据）</li><li>B+Tree的磁盘读写能力相对于B Tree来说更强（根节点和枝节点不保存数据区，所以一个节点可以保存更多的关键字，一次磁盘加载的关键字更多）</li><li>排序能力更强（因为叶子节点上有下一个数据区的指针，数据形成了链表）</li><li>效率更加稳定（B+Tree永远是在叶子节点拿到数据，所以 IO 次数是稳定的，恒定为树的深度）</li></ol><h2 id="其他的存储模型"><a href="#其他的存储模型" class="headerlink" title="其他的存储模型"></a>其他的存储模型</h2><h3 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h3><p><img src="https://avriesl.github.io/images/mysql/Hash-Table.png" alt="Hash Table"></p><p>哈希索引有什么特点呢？</p><ol><li>它的时间复杂度是 O(1)，查询速度比较快。但是哈希索引里面的数据不是按顺序存储的， 所以不能用于排序。</li><li>我们在查询数据的时候要根据键值计算哈希码，所以它只能支持等值查询（= IN），不支 持范围查询（&gt; &lt; &gt;= &lt;= between and）。</li><li>如果字段重复值很多的时候，会出现大量的哈希冲突（采用拉链法解决），效率会降低。需要注意的是，在 InnoDB 中，不能显示地创建一个哈希索引（所谓的支持哈希索引指的是<br>Adaptive Hash Index）</li></ol><p>注：memory与NDB存储引擎可以使用Hash索引。</p><h1 id="索引的落地形式"><a href="#索引的落地形式" class="headerlink" title="索引的落地形式"></a>索引的落地形式</h1><p>通过<a href="https://avriesl.github.io/2021/08/16/MySQL-%E4%B8%80-MySQL%E5%86%85%E9%83%A8%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%90%84%E7%BB%84%E4%BB%B6%E5%8A%9F%E8%83%BD/">MySQL(一) MySQL内部架构及各组件功能</a><br>中MySQL的物理架构我们知道，不同的存储引擎，数据文件格式是不一样。</p><p>可通过以下命令查看数据文件的存储目录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;datadir&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> datadir       <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------+</span></span><br></pre></td></tr></table></figure><p>在数据库中使用相同字段分别使用InnoDB、MyISAM、MEMORY三种存储引擎创建了三个表user_innodb、user_myisam、user_memory，<br>并插入相同的数据。然后进入数据文件目录中，查看一下他的数据文件格式分别是什么？</p><p><img src="https://avriesl.github.io/images/mysql/datadir.png" alt="data dir"></p><p>其中：</p><ul><li>user_innodb表有两个数据文件，分别是user_innodb.frm与user_innodb.ibd；</li><li>user_myisam表有三个数据文件，分别是user_myisam.MYD、user_myisam.MYI、user_myisam.frm；</li><li>user_memory表有一个数据文件，是user_memory.frm；</li></ul><p>三种存储引擎均生成了.frm文件，.frm是MySQL里面表结构定义的文件，建表的时候选用任何 一个存储引擎都会生成。</p><h2 id="MyISAM落地形式"><a href="#MyISAM落地形式" class="headerlink" title="MyISAM落地形式"></a>MyISAM落地形式</h2><p>除去.frm文件外，MyISAM表还生成了两个数据文件</p><ol><li>.MYD文件：MY代表MyISAM存储引擎，D代表Data，是MyISAM的数据文件，存放数据记录，user_myisam.MYD文件代表该文件存储了user_myisam表中的所有数据。</li><li>.MYI文件：MY代表MyISAM存储引擎，I代表Index，是MyISAM的索引文件，存放索引记录，user_myisam.MYI文件代表该文件存储了user_myisam表中的所有索引。</li></ol><p>也就是说在MyISAM存储引擎里面，索引和数据是两个独立的文件。</p><p>MyISAM的B+Tree索引里面，叶子节点存储的是数据文件对应的磁盘地址。所以从索引文件.MYI中找到键值后，会到数据文件.MYD中获取相应的数据记录。<br>Hash索引同理。</p><h2 id="MEMORY落地形式"><a href="#MEMORY落地形式" class="headerlink" title="MEMORY落地形式"></a>MEMORY落地形式</h2><p>MEMORY表落地文件仅有.frm即表结构定义文件</p><p>原因是MEMORY存储引擎的特殊性，MEMORY存储引擎的数据是存储在内存中的，并未存入磁盘，所以不存在数据或索引文件。</p><h2 id="InnoDB落地形式"><a href="#InnoDB落地形式" class="headerlink" title="InnoDB落地形式"></a>InnoDB落地形式</h2><p>除去.frm文件外，InnoDB表仅生成了.ibd文件</p><p>那么.ibd文件存储的是数据还是索引呢？</p><p>这就涉及了InnoDB的一个特点：<br><strong>数据即索引，索引即数据</strong></p><p>.ibd文件中即存储了数据也存储了索引，在InnoDB的B+Tree索引中，它以主键（<strong>聚集索引</strong>）为索引来构成B+Tree的数据结构，其叶子节点存储了数据。</p><p>但这产生了一个问题，InnoDB表可能存在多个索引，但数据只有一份，那么除<strong>聚集索引</strong>外的其他索引的叶子节点存储的是什么？</p><p>在InnoDB中，索引可以分为两种<strong>聚集索引</strong>和<strong>二级索引（也叫做辅助索引）</strong>，<br><strong>聚集索引</strong>我们在上文索引的类型中有详细讲解过，而除<strong>聚集索引</strong>以外的所有索引我们统一叫做<strong>二级索引</strong>。</p><p>由于数据是存储在<strong>聚集索引</strong>B+ Tree的叶子节点上的，且为了节省数据占用空间，所以数据也只有<strong>聚集索引</strong>上那一份，<br>所以<strong>二级索引</strong>的叶子节点中存储的是<strong>聚集索引</strong>的键值。</p><p>举个例子：</p><p>user_innodb表结构与数据如下，其中id为主键（聚集索引），name字段为普通索引（二级索引）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_innodb;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> laim  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> laim2 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> laim3 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br></pre></td></tr></table></figure><p>那么，在user_innodb.ibd文件中，存在两棵B+ Tree，</p><ol><li>由聚集索引构成的B+ Tree，其中非叶子节点存储键值id以及子节点引用，叶子节点存储具体数据</li><li>有二级索引构成的B+ Tree，其中非叶子节点存储键值name以及子节点引用，叶子节点存储name对应的id的值</li></ol><p>当使用where name=”laim”作为条件查询时，name字段上存在索引，所以先检索二级索引的B+ Tree，找到name=”laim”对应的叶子节点，<br>其叶子节点存储了<em>id 1</em>，再通过id=1到聚集索引的B+ Tree中查询具体数据。</p><p>所以使用聚集索引会比使用二级索引检索速度相对快一点，因为它少扫描了一棵B+ Tree。</p><blockquote><p>在上述表结构情况下，<br>执行select id, name from user_innodb where name = ‘laim’语句时，<br>底层其实仅扫描了一棵B+ Tree，因为要查询的字段，id和name，在检索完第一课B+ Tree时就已经获取到了，<br>这种情况下就不会再去检索聚集索引的B+ Tree。</p><p>如果user_innodb表中还存在sex字段，而当前实现的语句为select id, name, sex from user_innodb where name = ‘laim’语句时，<br>底层在扫描完第一颗树后，仅获取到了id、name两个字段，这种情况才需要再通过id去查询聚集索引树，检索出全部数据。<br>这种现象也叫做<strong>回表查询</strong>。</p><p>在我们书写sql语句时，要尽量避免回表查询</p></blockquote><h1 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h1><p>以下是我对索引使用的一个总结，仅供参考：</p><ol><li>建立索引的字段，不允许有空</li><li>建立索引的字段，数据长度不易过长</li><li>建立索引的字段，最好选择常用且重复度低的</li><li>常用的，且具有关联性的字段，建议使用联合索引，这样可避免回表</li><li>仅查询需要的字段，减少查询时的盎余字段，避免回表</li><li>索引数量不易过多，浪费空间且会导致数据更新变慢</li><li>频繁更新的字段，不建议创建索引</li></ol><p>索引失效的场景：</p><ol><li>索引列上使用函数（replace\SUBSTR\CONCAT\sum count avg）、表达式，可能会导致索引失效</li><li>字符串不加引号，出现隐式转换，可能会导致索引失效</li><li>like条件中前面带%，可能会导致索引失效（检索字符时，也遵循最左匹配原则）</li><li>负向查询，例如NOT LIKE、!= （&lt;&gt;）和 NOT IN，某些情况下会导致索引失效</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(五) Update语句执行流程</title>
      <link href="/2021/08/16/MySQL-%E4%BA%94-Update%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/08/16/MySQL-%E4%BA%94-Update%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>这篇文章演示环境为：MySQL5.7。</p><p>主要内容为基于<a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL5.7官方文档</a>的学习，对MySQL update/insert/delete执行流程相关内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><span id="more"></span><p><img src="https://img2020.cnblogs.com/blog/565213/202005/565213-20200530221711156-63363016.png" alt="更新流程"></p><p><strong>1. 查询</strong></p><p>与<a href="https://avriesl.github.io/2021/08/16/MySQL-%E4%BA%8C-Select%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/">Select语句执行流程</a><br>相同，先查询要更新的数据，并将其从磁盘文件加载到内存中的<strong>Buffer Pool</strong>中</p><p><strong>2. 写入undo log</strong></p><p>将已经加载到<strong>Buffer Pool</strong>数据，记录到undo log中，便于回滚时需要</p><p><strong>3. 修改</strong></p><p>修改已加载到<strong>Buffer Pool</strong>中的数据</p><p><strong>4. 记入redo log</strong></p><p>将更新语句记录到redo log buffer中，并刷新到磁盘中，标记为prepare状态</p><p><strong>5. 记入bin log（两阶段提交）</strong></p><p>若redo log buffer写盘成功，则记录更新语句到bin log中</p><p>若bin log写盘成功，则可提交事务，将redo log中对应记录标记为commit状态</p><p><strong>6. 刷脏</strong></p><p>两阶段提交完成后，更新语句便执行完成，但此时已修改的记录仍在<strong>Buffer Pool</strong>中，还未写入磁盘</p><p>此时InnoDB会通过刷脏的方式，将修改记录写入磁盘，已保证数据的一致性</p><blockquote><p><strong>刷脏</strong>: 在InnoDB中存在一个专门的线程，负责每隔一段时间就一次性将多个修改写入磁盘</p><p><strong>脏页</strong>: buffer pool中与磁盘数据页内容不一致的数据页</p><p><strong>干净页</strong>: 刷脏后，buffer pool中与磁盘数据页内容一致的数据页</p></blockquote><p><strong>刷脏的触发条件</strong>:</p><ol><li><p>到达设定时间后，InnoDB会执行刷脏;</p></li><li><p>buffer pool满了，InnoDB会强制执行刷脏;</p></li><li><p>redo log满了，InnoDB会使更新操作拥塞;</p></li><li><p>MySQL关闭的时候。</p></li></ol><blockquote><p>修改数据未刷脏时，若用户查询数据，InnoDB会现在Buffer Pool中查询一遍，若有对应数据则返回结果集</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(四) InnoDB Buffer Pool</title>
      <link href="/2021/08/16/MySQL-%E5%9B%9B-InnoDB-Buffer-Pool/"/>
      <url>/2021/08/16/MySQL-%E5%9B%9B-InnoDB-Buffer-Pool/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章演示环境为：MySQL5.7。</p><p>主要内容为基于<a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL5.7官方文档</a>的学习，对InnoDB buffer pool相关内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><span id="more"></span><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-buffer-pool.html">MySQL :: MySQL 5.7 Reference Manual :: 14.5.1 Buffer Pool</a></p><p>通过官方文档的描述，可以发现</p><p><code>The buffer pool is an area in main memory where </code>InnoDB<code> caches table and index data as it is accessed. The buffer pool permits frequently used data to be accessed directly from memory, which speeds up processing. On dedicated servers, up to 80% of physical memory is often assigned to the buffer pool.</code></p><ol><li><p>buffer pool是存在于内存中;</p></li><li><p>在InnoDB存储引擎访问缓存表与索引数据时会用到;</p></li><li><p>buffer pool可以用来加快数据处理速度(调优的一个方向)。</p></li></ol><p>所以，buffer pool是由InnoDB存储引擎管理的一块存在于内存的缓存区。</p><p>在实际生产环境中，根据数据容量，物理机性能，Buffer Pool设置越大，MySQL性能越好。</p><h1 id="Buffer-Pool的状态"><a href="#Buffer-Pool的状态" class="headerlink" title="Buffer Pool的状态"></a>Buffer Pool的状态</h1><p>使用<em>show engine innodb status\G</em>命令查看Buffer Pool状态。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> engine innodb status\G;</span><br><span class="line"><span class="comment">-------------省略其他输出-------------</span></span><br><span class="line"><span class="comment">----------------------</span></span><br><span class="line">BUFFER POOL <span class="keyword">AND</span> MEMORY</span><br><span class="line"><span class="comment">----------------------</span></span><br><span class="line">Total <span class="keyword">large</span> memory allocated <span class="number">137428992</span>                      <span class="comment">-- mysql总共分配的内存大小，单位byte</span></span><br><span class="line">Dictionary memory allocated <span class="number">163016</span>                          <span class="comment">-- mysql数据字典内存区大小，单位byte</span></span><br><span class="line">Buffer pool size   <span class="number">8192</span>                                     <span class="comment">-- Buffer Pool中页的总数，实际占用内存为8192*16K=128M</span></span><br><span class="line"><span class="keyword">Free</span> buffers       <span class="number">6578</span>                                     <span class="comment">-- Buffer Pool中空白页数量（Free List），实际占用内存为6578*16K≈102M</span></span><br><span class="line">Database pages     <span class="number">1611</span>                                     <span class="comment">-- Buffer Pool中使用的页数量（LRU List），实际占用内存为1611*16K≈25M</span></span><br><span class="line"><span class="keyword">Old</span> database pages <span class="number">574</span>                                      <span class="comment">-- Buffer Pool中Old Pages数量</span></span><br><span class="line">Modified db pages  <span class="number">0</span>                                        <span class="comment">-- 脏页</span></span><br><span class="line">Pending <span class="keyword">reads</span>      <span class="number">0</span></span><br><span class="line">Pending writes: LRU <span class="number">0</span>, flush list <span class="number">0</span>, single page <span class="number">0</span></span><br><span class="line">Pages made young <span class="number">218</span>, <span class="keyword">not</span> young <span class="number">1</span></span><br><span class="line"><span class="number">0.00</span> youngs<span class="operator">/</span>s, <span class="number">0.00</span> non<span class="operator">-</span>youngs<span class="operator">/</span>s</span><br><span class="line">Pages read <span class="number">332</span>, created <span class="number">3931</span>, written <span class="number">6370</span></span><br><span class="line"><span class="number">0.00</span> <span class="keyword">reads</span><span class="operator">/</span>s, <span class="number">0.00</span> creates<span class="operator">/</span>s, <span class="number">0.00</span> writes<span class="operator">/</span>s</span><br><span class="line"><span class="keyword">No</span> buffer pool page gets since the <span class="keyword">last</span> printout</span><br><span class="line">Pages read ahead <span class="number">0.00</span><span class="operator">/</span>s, evicted <span class="keyword">without</span> access <span class="number">0.00</span><span class="operator">/</span>s, Random read ahead <span class="number">0.00</span><span class="operator">/</span>s</span><br><span class="line">LRU len: <span class="number">1611</span>, unzip_LRU len: <span class="number">0</span></span><br><span class="line">I<span class="operator">/</span>O sum[<span class="number">0</span>]:cur[<span class="number">0</span>], unzip sum[<span class="number">0</span>]:cur[<span class="number">0</span>]</span><br><span class="line"><span class="comment">-------------省略其他输出-------------</span></span><br></pre></td></tr></table></figure><h1 id="预读"><a href="#预读" class="headerlink" title="预读"></a>预读</h1><p>首先，我们了解数据文件是存储在磁盘上的，而且对于计算机来说，内存的读取速度是远远大于磁盘的</p><p>那么，如果我们每次更新操作都落地到磁盘上，那么IO代价就会太大了</p><p>所以，InnoDB在读取数据时，不是按需读取，而是按页读取，因为<strong>局部性原则</strong>，在数据访问时，使用一些数据，大概率会使用<br>附近的数据，从而通过按页读取会省去后续读取的IO操作，从而提高效率。</p><blockquote><p>MySQL默认一页16K</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_page_size">MySQL :: MySQL 5.7 Reference Manual :: 14.15 InnoDB Startup Options and System Variables</a></p></blockquote><p>InnoDB的两种预读算法：</p><p><a href="https://www.cnblogs.com/geaozhang/p/7397699.html">关于MySQL buffer pool的预读机制 - GeaoZhang - 博客园 (cnblogs.com)</a></p><h1 id="LRU算法"><a href="#LRU算法" class="headerlink" title="LRU算法"></a>LRU算法</h1><p><img src="https://dev.mysql.com/doc/refman/5.7/en/images/innodb-buffer-pool-list.png" alt="buffer pool list"></p><p>buffer pool使用LRU算法的变种来管理</p><p>InnoDB将buffer pool内存区域分成两块：new sublist、old sublist，内存区域中点为new sublist的尾节点与old sublist的头节点;</p><p>当InnoDB将一个新的数据页读入buffer pool时，将新数据页插入到old sublist的头节点处，若buffer pool无空间用于插入新数据页，<br>则清理buffer pool中old sublist的尾节点;</p><p>当访问old sublist中数据页时，将其置入new sublist的头节点;</p><p>随着数据的访问，buffer pool中未被访问的数据页，会逐步老化，当数据页到达old sublist尾节点时，若插入新数据页，则将其清理;</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(三) MySQL日志文件</title>
      <link href="/2021/08/16/MySQL-%E4%B8%89-MySQL%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/"/>
      <url>/2021/08/16/MySQL-%E4%B8%89-MySQL%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章演示环境为：MySQL5.7。</p><p>主要内容为基于<a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL5.7官方文档</a>的学习，对MySQL日志相关内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><span id="more"></span><p>MySQL中共有六种日志文件，分别为：</p><ul><li>错误日志（error log）：记录启动、运行、停止mysql服务时遇到的错误。</li><li>一般查询日志（general query log）：记录已建立的客户端连接和从客户端收到的语句。</li><li>二进制日志（binary log）：记录更改数据的语句。</li><li>中继日志（relay log）：记录从复制源服务器处收到的数据更改语句。</li><li>慢查询日志（slow query log）：记录执行时间超过参数<em>long_query_time</em>的查询语句。</li><li>DDL日志（ddl log）：记录DDL语句执行的元数据操作。</li></ul><p>以上六种属于MySQL服务端日志，但MySQL产生的日志并非仅有上述几种</p><p>MySQL5.7中，InnoDB存储引擎支持事务，所以InnoDB也会产生相应的事务日志：重做日志（redo log）、回滚日志（undo log）。</p><h1 id="MySQL服务端日志"><a href="#MySQL服务端日志" class="headerlink" title="MySQL服务端日志"></a>MySQL服务端日志</h1><h2 id="错误日志（error-log）"><a href="#错误日志（error-log）" class="headerlink" title="错误日志（error log）"></a>错误日志（error log）</h2><p><em>mysqld</em>可通过使用–log-error确定将错误日志写入控制台还是文件</p><p>若没有使用–log-error，则将错误日志写入控制台</p><p>若使用–log-error，但未指定文件名，则将错误日志写入host_name.err</p><p>若使用–log-error且指定文件名，则吸入指定文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;log_error&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name      <span class="operator">|</span> <span class="keyword">Value</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------+ </span></span><br><span class="line"><span class="operator">|</span> log_error          <span class="operator">|</span>             <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------+</span></span><br></pre></td></tr></table></figure><h2 id="一般查询日志（general-query-log）"><a href="#一般查询日志（general-query-log）" class="headerlink" title="一般查询日志（general query log）"></a>一般查询日志（general query log）</h2><p>一般查询日志是对<em>mysqld</em>正在做什么进行记录，当客户端连接或断开连接时，服务器将信息写入日志，并记录从客户端收到的每个sql语句。</p><p>当怀疑客户端存在错误或查询客户端发送给mysql的内容时，可以查询一般查询日志。</p><p>可通过如下命令查看<em>general query log</em>位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;general_log_file&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name      <span class="operator">|</span> <span class="keyword">Value</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------+ </span></span><br><span class="line"><span class="operator">|</span> general_log_file   <span class="operator">|</span>             <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------+</span></span><br></pre></td></tr></table></figure><h2 id="二进制日志（binary-log）"><a href="#二进制日志（binary-log）" class="headerlink" title="二进制日志（binary log）"></a>二进制日志（binary log）</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/binary-log.html">MySQL :: MySQL 5.7 Reference Manual :: 5.4.4 The Binary Log</a></p><p>二进制日志（binary log）也就是常说的binlog</p><p><strong>binlog以事件的形式记录了描述数据库更改的所有DML/DDL语句</strong>，binlog还包含了有关每个语句花费多长时间更新数据的信息。</p><p>binlog主要有两个作用：</p><ol><li>用于实现复制：复制源服务器将binlog发送给副本服务器，副本服务器将这些事件再次执行一遍，以完成与源相同的数据更改。</li><li>用于数据恢复：读取原数据库中binlog，开启线程复现binlog中记录的更新操作，从而完成数据恢复。</li></ol><h2 id="中继日志（relay-log）"><a href="#中继日志（relay-log）" class="headerlink" title="中继日志（relay log）"></a>中继日志（relay log）</h2><p>中继日志与binlog一样，是一组包含描述数据库更改时间的编号文件。</p><p>中继日志与binlog具有相同的格式，可以通过<em>mysqlbinlog</em>命令读取</p><p>一般与binlog配合使用，从而实现复制</p><h2 id="慢查询日志（slow-query-log）"><a href="#慢查询日志（slow-query-log）" class="headerlink" title="慢查询日志（slow query log）"></a>慢查询日志（slow query log）</h2><p>慢查询日志记录了执行时间超过参数<em>long_query_time</em>的查询语句。</p><p>主要用于优化，可通过如下命令查看日志路径：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;slow_query_log_file&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-------------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name         <span class="operator">|</span> <span class="keyword">Value</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-------------+ </span></span><br><span class="line"><span class="operator">|</span> slow_query_log_file   <span class="operator">|</span>             <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-------------+</span></span><br></pre></td></tr></table></figure><h2 id="DDL日志（ddl-log）"><a href="#DDL日志（ddl-log）" class="headerlink" title="DDL日志（ddl log）"></a>DDL日志（ddl log）</h2><p>DDL日志负责记录由影响表分区的数据定义而生成的元数据操作，是一个二进制文件。</p><h1 id="InnoDB日志"><a href="#InnoDB日志" class="headerlink" title="InnoDB日志"></a>InnoDB日志</h1><h2 id="重做日志（redo-log）"><a href="#重做日志（redo-log）" class="headerlink" title="重做日志（redo log）"></a>重做日志（redo log）</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-redo-log.html">MySQL :: MySQL 5.7 Reference Manual :: 14.6.6 Redo Log</a></p><p>redo log是一种基于磁盘的数据结构，用于在数据库崩溃期间纠正不完整事务写入的数据，以实现数据一致性</p><p>正常操作期间，redo log会对由sql语句或低级API调用产生的请求进行编码</p><p>在初始化期间和接受连接前，自动重放在意外关闭前未完成更新数据文件的修改</p><p>默认情况下，InnoDB在数据目录中创建两个5MB的重做日志文件，命名为ib_logfile0和ib_logfile1</p><p>可在mysql配置文件中对其修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">innodb_log_group_home_dir=/dr3/iblogs</span><br></pre></td></tr></table></figure><p>可通过以下步骤实现修改redo log大小</p><ol><li>停止MySQL服务，并保证关闭没有错误；</li><li>编辑my.cnf以更改日志文件配置。要更改日志文件大小，需配置innodb_log_file_size；</li><li>再次启动MySQL服务。</li></ol><h3 id="redo-log的优化"><a href="#redo-log的优化" class="headerlink" title="redo log的优化"></a>redo log的优化</h3><p>为了减少不必要的磁盘写入，可以考虑在以下几个方面对redo log进行优化：</p><ol><li>加大redo log大小，甚至可以加到和buffer pool一样大。这样会减少不必要的磁盘写入，但会导致更长的恢复时间。</li><li>增加日志缓冲区的大小，可通过innodb_log_buffer_size进行配置。</li><li>配置innodb_log_write_ahead_size选项来避免”读写”。</li></ol><h2 id="回滚日志（undo-log）"><a href="#回滚日志（undo-log）" class="headerlink" title="回滚日志（undo log）"></a>回滚日志（undo log）</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-undo-logs.html">MySQL :: MySQL 5.7 Reference Manual :: 14.6.7 Undo Logs</a></p><p>undo log是由单个事务读写相关联的撤销日志记录的集合构成。主要用于事务的回滚，详细可看InnoDB多版本管理（MVCC）描述。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(二) Select语句执行流程</title>
      <link href="/2021/08/16/MySQL-%E4%BA%8C-Select%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/08/16/MySQL-%E4%BA%8C-Select%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章演示环境为：MySQL5.7。</p><p>主要内容为基于<a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL5.7官方文档</a>的学习，对MySQL Select语句执行流程相关内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><span id="more"></span><h1 id="select-执行流程"><a href="#select-执行流程" class="headerlink" title="select 执行流程"></a>select 执行流程</h1><p><img src="https://avriesl.github.io/images/mysql/SELECT%20execution%20process.png" alt="select 执行流程"></p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p><strong>客户端</strong>通过MySQL数据库<strong>连接器</strong>连接到MySQL服务。</p><p><strong>客户端</strong>将SQL语句：<em>select id from user where id &gt; 1 and age = 15</em>传入MySQL服务。</p><h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><p>MySQL在<strong>查询缓存</strong>（Query Cache)中检查是否存在与传入SQL语句一模一样的语句，若存在则返回结果集。</p><h2 id="词法、语法解析"><a href="#词法、语法解析" class="headerlink" title="词法、语法解析"></a>词法、语法解析</h2><p>若未命中缓存或未开启<strong>查询缓存</strong>（Query Cache），则将SQL语句传入<strong>解析器</strong>模块（parser）</p><p><strong>解析器</strong>将SQL语句打散为select、id、from、user、where、id、&gt;、1、and、=、15这11个符号，并记录每个符号是什么类型，符号间顺序</p><p>随后对打散的符号进行语法检查，若语法检查到错误则报错返回</p><p>语法检查通过后，基于MySQL定义的语法规则，根据SQL语句生成一个数据结构（<strong>解析树</strong>）</p><p><img src="https://avriesl.github.io/images/mysql/select.png" alt="select"></p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p><strong>解析器</strong>生成<strong>解析树</strong>后，将<strong>解析树</strong>传入<strong>预处理器</strong></p><p><strong>预处理器</strong>对<strong>解析树</strong>进行语义解析，检查生成的<strong>解析树</strong>中是否存在表名错误、字段名错误、别名错误等，并生成<strong>新的解析树</strong></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><strong>预处理器</strong>生成的<strong>新的解析树</strong>后，将<strong>新的解析树</strong>传入<strong>优化器</strong></p><p><strong>优化器</strong>通过MySQL优化规则优化<strong>解析树</strong>，并根据<strong>解析树</strong>生成不同的<strong>执行计划</strong>，然后选择一种开销（cost）最小<strong>最优的执行计划</strong>。</p><blockquote><p>MySQL优化器仅会对sql进行一些简单的优化，例如：</p><p>判断sql中是否存在恒等式或恒不等式（若存在则移除或返回）</p><p>判断sql执行结果是否直接从索引中获取等等</p></blockquote><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p><strong>优化器</strong>生成最优的<strong>执行计划</strong>后，将<strong>执行计划</strong>传入对应的<strong>存储引擎</strong>（存储引擎在建表时指定，若未指定则选用默认存储引擎，MySQL5.7默认存储引擎为Innodb）</p><p><strong>存储引擎</strong>会通过<strong>执行计划</strong>在实际数据文件内查询数据，返回。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(一) MySQL内部架构及各组件功能</title>
      <link href="/2021/08/16/MySQL-%E4%B8%80-MySQL%E5%86%85%E9%83%A8%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%90%84%E7%BB%84%E4%BB%B6%E5%8A%9F%E8%83%BD/"/>
      <url>/2021/08/16/MySQL-%E4%B8%80-MySQL%E5%86%85%E9%83%A8%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%90%84%E7%BB%84%E4%BB%B6%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章演示环境为：MySQL5.7。</p><p>主要内容为基于<a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL5.7官方文档</a>的学习，对MySQL整体架构及内部模块相关内容的整理及自己的理解。</p><p>如有错误或疑问，欢迎讨论！</p><span id="more"></span><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><h2 id="物理架构"><a href="#物理架构" class="headerlink" title="物理架构"></a>物理架构</h2><p><img src="https://lalitvc.files.wordpress.com/2016/11/mysql_physical_arch2.png" alt="MySQL的物理架构"></p><h3 id="MySQL二进制文件目录（Base-Directory）"><a href="#MySQL二进制文件目录（Base-Directory）" class="headerlink" title="MySQL二进制文件目录（Base Directory）"></a>MySQL二进制文件目录（Base Directory）</h3><h4 id="程序日志文件（Program-log-files）"><a href="#程序日志文件（Program-log-files）" class="headerlink" title="程序日志文件（Program log files）"></a>程序日志文件（Program log files）</h4><ul><li>依赖（Libraries）</li><li>文档，支撑文件（Documents, support files）</li><li>PID文件（pid files）</li><li>Socket文件（socket files）</li></ul><h4 id="程序可执行文件（Program-executable-files）"><a href="#程序可执行文件（Program-executable-files）" class="headerlink" title="程序可执行文件（Program executable files）"></a>程序可执行文件（Program executable files）</h4><p>主要为MySQL启动、备份等功能的可执行文件。例如：</p><ul><li>mysql（客户端程序）</li><li>mysqld（服务端程序）</li><li>mysqladmin（管理程序）</li><li>mysqldump（备份程序）</li><li>… …</li></ul><h3 id="MySQL数据文件目录（Data-Directory）"><a href="#MySQL数据文件目录（Data-Directory）" class="headerlink" title="MySQL数据文件目录（Data Directory）"></a>MySQL数据文件目录（Data Directory）</h3><p>MySQL不同存储引擎、不同版本下都有属于自己的数据文件格式，以下数据文件格式仅代表MySQL 5.7默认存储引擎（Innodb）情况。</p><h4 id="数据文件目录（Data-Directory）"><a href="#数据文件目录（Data-Directory）" class="headerlink" title="数据文件目录（Data Directory）"></a>数据文件目录（Data Directory）</h4><ul><li>服务端日志文件（Server log files）</li><li>数据库状态文件（Status file）</li><li>Innodb日志文件（Innodb log files）</li><li>Innodb系统表空间（Innodb system tablespace）</li><li>Innodb日志缓存（Innodb log buffer）</li><li>… …</li></ul><h4 id="数据文件子目录（Data-sub-directory）"><a href="#数据文件子目录（Data-sub-directory）" class="headerlink" title="数据文件子目录（Data sub-directory）"></a>数据文件子目录（Data sub-directory）</h4><ul><li>数据索引文件（.ibd）</li><li>数据结构文件（.frm, .opt）</li></ul><h2 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h2><p><img src="https://lalitvc.files.wordpress.com/2016/11/mysql_logical_arch1.png" alt="MySQL的逻辑架构"></p><h3 id="客户端（Client）"><a href="#客户端（Client）" class="headerlink" title="客户端（Client）"></a>客户端（Client）</h3><p>用于连接MySQL服务器的各种应用程序，例如：</p><ul><li>ODBC</li><li>JDBC</li><li>.NET</li><li>PHP</li><li>… …</li></ul><h3 id="服务端（Server）"><a href="#服务端（Server）" class="headerlink" title="服务端（Server）"></a>服务端（Server）</h3><p>MySQL实例，用于进行数据处理及数据存储。</p><h4 id="连接器（Connections）"><a href="#连接器（Connections）" class="headerlink" title="连接器（Connections）"></a>连接器（Connections）</h4><p>MySQL默认监听端口为3306。</p><h5 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h5><p>MySQL支持多种通信协议。</p><ol><li>TCP/IP协议</li></ol><p>例如：JDBC、ODBC等数据库驱动产生的连接，这种连接被称为<strong>非交互式连接</strong>。</p><ol start="2"><li>Unix Socket</li></ol><p>例如：在服务器上运行<em>mysql -u root -p</em>登录服务器产生的连接，连接需要<em>mysql.sock</em>文件，这种连接被称为<strong>交互式连接</strong>。</p><blockquote><p>交互式连接：</p><p>在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端产生的连接就是交互式连接，例如通过命令登录MySQL进行操作，当你停止操作时间超过参数interactive_timeout后，MySQL就会断开连接；</p><p>非交互式连接：</p><p>在mysql_real_connect()中使用wait_timeout选项的客户端产生的连接就是非交互式连接，例如通过JDBC等方式产生的连接，当非交互式连接获取的线程不活跃时长草果wait_timeout（默认8小时）后，MySQL就会清除掉该连接线程。</p></blockquote><h5 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h5><p>MySQL使用半双工的通信方式。</p><p>半双工意味着要么客户端向服务端发送数据，要么服务端向客户端发送数据，这两个动作不能同时发生。</p><p>所以在一次连接里面，客户端发送SQL语句到服务端时，数据是不能分成多个小块发送的，不管SQL语句有多大，都是一次性发送。</p><p>如果发送给数据包过大，我们必须要调整MySQL服务端配置<em>max_allowed_packet</em>参数的值（默认4M，最大1G，最小1K）。</p><p><img src="https://avriesl.github.io/images/mysql/max_allowed_packet.png" alt="max_allowed_packet"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 可以通过如下命令查看</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;max_allowed_packet&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name      <span class="operator">|</span> <span class="keyword">Value</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------+ </span></span><br><span class="line"><span class="operator">|</span> max_allowed_packet <span class="operator">|</span> <span class="number">1073741824</span>  <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------+</span></span><br></pre></td></tr></table></figure><h5 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h5><p>MySQL即支持短连接，也支持长连接。</p><p>短连接即连接中若超过一定时间未进行任何操作，则close连接，可通过更改<em>interactive_timeout</em>参数的值进行调整（默认8小时，最小1s）。</p><p><img src="https://avriesl.github.io/images/mysql/interactive_timeout.png" alt="interactive_timeout"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 可以通过如下命令查看(交互式连接超时时间)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;interactive_timeout&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name       <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-------+ </span></span><br><span class="line"><span class="operator">|</span> interactive_timeout <span class="operator">|</span> <span class="number">7200</span>  <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-------+</span></span><br></pre></td></tr></table></figure><p>长连接即连接在一定时间内均处于非活跃连接，则kill该连接，可通过更改<em>wait_timeout</em>参数的值进行调整（默认8小时，最小1s，windows系统最大25天左右，其他系统最大1年）</p><p><img src="https://avriesl.github.io/images/mysql/wait_timeout.png" alt="wait_timeout"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 可以通过如下命令查看(非交互式连接超时时间)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;wait_timeout&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------+ </span></span><br><span class="line"><span class="operator">|</span> wait_timeout  <span class="operator">|</span> <span class="number">86400</span>  <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------+</span></span><br></pre></td></tr></table></figure><p>MySQL默认连接数为151个（5.7版本），最大100000个</p><p><img src="https://avriesl.github.io/images/mysql/max_connections.png" alt="max_connections"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 可以通过如下命令查看</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;max_connections&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+ </span></span><br><span class="line"><span class="operator">|</span> max_connections  <span class="operator">|</span> <span class="number">2532</span>  <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br></pre></td></tr></table></figure><p>可以通过如下命令查看查询的执行状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">full</span> processlist;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------------+----+---------+---------+-------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> host            <span class="operator">|</span> db <span class="operator">|</span> command <span class="operator">|</span> <span class="type">time</span>    <span class="operator">|</span> state <span class="operator">|</span> info <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------------+----+---------+---------+-------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">69</span> <span class="operator">|</span> root <span class="operator">|</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">48786</span> <span class="operator">|</span>    <span class="operator">|</span> Sleep   <span class="operator">|</span> <span class="number">53</span>      <span class="operator">|</span>       <span class="operator">|</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------------+----+---------+---------+-------+------+</span></span><br></pre></td></tr></table></figure><p>其中state可详见<a href="https://dev.mysql.com/doc/refman/5.7/en/general-thread-states.html">MySQL :: MySQL 5.7 Reference Manual :: 8.14.3 General Thread States</a></p><h4 id="查询缓存（Query-Cache）"><a href="#查询缓存（Query-Cache）" class="headerlink" title="查询缓存（Query Cache）"></a>查询缓存（Query Cache）</h4><p>可通过<em>have_query_cache</em>参数查看服务器查询缓存是否可用</p><blockquote><p>从 MySQL 5.7.20 开始不推荐使用查询缓存，并在 MySQL 8.0 中删除。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;have_query_cache&#x27;</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+ </span></span><br><span class="line"><span class="operator">|</span> have_query_cache <span class="operator">|</span> YES   <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br></pre></td></tr></table></figure><p>可通过<em>query_cache_type</em>参数查看服务器是否开启查询缓存</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;query_cache_type&#x27;</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+ </span></span><br><span class="line"><span class="operator">|</span> query_cache_type <span class="operator">|</span> OFF   <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br></pre></td></tr></table></figure><p>Query Cache是MySQL内部自带的一个缓存模块，默认是关闭的，主要是因为Query Cache的应用场景有限</p><ol><li>Query Cache要求SQL语句必须一模一样；</li><li>表中任何一条数据发生变化时，Query Cache中所有关于这张表的缓存均会失效。</li></ol><h4 id="解析器（parser）"><a href="#解析器（parser）" class="headerlink" title="解析器（parser）"></a>解析器（parser）</h4><p>MySQL解析器会对SQL语句进行词法、语法进行分析。</p><h5 id="词法解析"><a href="#词法解析" class="headerlink" title="词法解析"></a>词法解析</h5><p>MySQL会将一个完整的SQL语句进行打散为一个一个的单词</p><p>例如：select id from user where id &gt; 1 and age = 15;</p><p>MySQL会将这个SQL语句打散为select、id、from、user、where、id、&gt;、1、and、=、15这11个符号，并记录每个符号是什么类型，符号间顺序。</p><h5 id="语法解析"><a href="#语法解析" class="headerlink" title="语法解析"></a>语法解析</h5><p>MySQL会对SQL做一些语法检查，然后基于MySQL定义的语法规则，根据SQL语句生成一个数据结构（<strong>解析树</strong>）</p><p><img src="https://avriesl.github.io/images/mysql/select.png" alt="select"></p><h4 id="预处理器（prepared）"><a href="#预处理器（prepared）" class="headerlink" title="预处理器（prepared）"></a>预处理器（prepared）</h4><p>主要用于语义解析，检查生成的<strong>解析树</strong>中是否存在表名错误、字段名错误、别名错误等，并生成<strong>新的解析树</strong></p><h4 id="优化器（optimizer）"><a href="#优化器（optimizer）" class="headerlink" title="优化器（optimizer）"></a>优化器（optimizer）</h4><p>优化<strong>解析树</strong>，并根据<strong>解析树</strong>生成不同的<strong>执行计划</strong>，然后选择一种最优的执行计划，在MySQL中使用的是一种基于开销（cost）的优化器，所以在MySQL 优化器中，使用的就是开销最小执行计划。</p><blockquote><p>优化类型：</p><p>1.多表关联查询时，选择基准表</p><p>2.where条件中存在恒等式或恒不等式，移除该条件</p><p>3.查询数据时，判断是否使用索引</p><p>4.count()、max()、min()等方法时，判断是否能直接从索引中获取</p><p>5.其他</p><p>注意：开销最小 ≠ 时间最短</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Last_query_cost&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------+ </span></span><br><span class="line"><span class="operator">|</span> Last_query_cost  <span class="operator">|</span> <span class="number">12.499000</span>   <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------+</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>优化器的追踪</strong></p><p><a href="https://dev.mysql.com/doc/internals/en/optimizer-tracing.html">MySQL :: MySQL Internals Manual :: 8 Tracing the Optimizer</a></p><p>启用优化器的追踪功能（默认是关闭的）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;optimizer_trace&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span>                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------------+ </span></span><br><span class="line"><span class="operator">|</span> optimizer_trace  <span class="operator">|</span> enabled<span class="operator">=</span>off,one_line<span class="operator">=</span>off   <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------------+</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> optimizer_trace<span class="operator">=</span>&quot;enabled=on&quot;;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;optimizer_trace&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------------+ </span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span>                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------------+ </span></span><br><span class="line"><span class="operator">|</span> optimizer_trace  <span class="operator">|</span> enabled<span class="operator">=</span><span class="keyword">on</span>,one_line<span class="operator">=</span>off    <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------------------------+</span></span><br></pre></td></tr></table></figure><p>注意：开启这个功能会消耗性能</p><p>随后执行一条SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `<span class="keyword">user</span>` <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> pwd <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Laim     <span class="operator">|</span> <span class="number">123</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+-----+</span></span><br></pre></td></tr></table></figure><p>这个时候优化器分析过程已经记录到系统表中了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace;</span><br><span class="line"># 显示结果太长，此处省略</span><br></pre></td></tr></table></figure><p>最后记得关闭追踪功能</p></blockquote><h4 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h4><p><a href="https://dev.mysql.com/doc/refman/5.7/en/storage-engines.html">MySQL :: MySQL 5.7 Reference Manual :: 15 Alternative Storage Engines</a></p><p>当优化器生成最优<strong>执行计划</strong>后，执行器会将执行计划交给存储引擎，存储引擎会通过执行计划在实际数据文件内查询数据。</p><p>在MySQL中，支持多种存储引擎，可以通过show engines语句查询你的服务器支持哪些存储引擎。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> engines;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------+--------------+-----+------------+</span></span><br><span class="line"><span class="operator">|</span> Engine             <span class="operator">|</span> Support <span class="operator">|</span> Comment         <span class="operator">|</span> Transactions <span class="operator">|</span> XA  <span class="operator">|</span> Savepoints <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------+--------------+-----+------------+</span></span><br><span class="line"><span class="operator">|</span> PERFORMANCE_SCHEMA <span class="operator">|</span> YES     <span class="operator">|</span> Performance ... <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------+--------------+-----+------------+</span></span><br><span class="line"><span class="operator">|</span> MRG_MYISAM         <span class="operator">|</span> YES     <span class="operator">|</span> Collection of...<span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------+--------------+-----+------------+</span></span><br><span class="line"><span class="operator">|</span> MyISAM             <span class="operator">|</span> YES     <span class="operator">|</span> MyISAM stora... <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------+--------------+-----+------------+</span></span><br><span class="line"><span class="operator">|</span> BLACKHOLE          <span class="operator">|</span> YES     <span class="operator">|</span> <span class="operator">/</span>dev<span class="operator">/</span><span class="keyword">null</span> st... <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------+--------------+-----+------------+</span></span><br><span class="line"><span class="operator">|</span> InnoDB             <span class="operator">|</span> <span class="keyword">DEFAULT</span> <span class="operator">|</span> Supports tra... <span class="operator">|</span> YES          <span class="operator">|</span> YES <span class="operator">|</span> YES        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------+--------------+-----+------------+</span></span><br><span class="line"><span class="operator">|</span> MEMORY             <span class="operator">|</span> YES     <span class="operator">|</span> Hash based ...  <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------+--------------+-----+------------+</span></span><br><span class="line"><span class="operator">|</span> ARCHIVE            <span class="operator">|</span> YES     <span class="operator">|</span> Archive stor... <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------+--------------+-----+------------+</span></span><br><span class="line"><span class="operator">|</span> CSV                <span class="operator">|</span> YES     <span class="operator">|</span> CSV storage...  <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>  <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------+--------------+-----+------------+</span></span><br><span class="line"><span class="operator">|</span> FEDERATED          <span class="operator">|</span> <span class="keyword">NO</span>      <span class="operator">|</span> Federated My... <span class="operator">|</span>              <span class="operator">|</span>     <span class="operator">|</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+-----------------+--------------+-----+------------+</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习计划</title>
      <link href="/2021/06/26/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2021/06/26/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习网站分享（持续更新）</p><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualization (usfca.edu)</a></p><p><a href="https://try.redis.io/">Try Redis</a></p><span id="more"></span><h1 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h1><h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><h3 id="Core-Java"><a href="#Core-Java" class="headerlink" title="Core Java"></a>Core Java</h3><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p><a href="https://avriesl.gitee.io/2020/09/06/ArrayList%E4%B8%8ELinkList/">ArrayList与LinkList</a></p><p><a href="https://avriesl.gitee.io/2020/09/08/HashMap%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6%E4%B8%8E%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8/">HashMap的扩容机制与线程不安全</a></p><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><a href="https://avriesl.gitee.io/2020/09/27/String%E5%9C%A8JVM%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/">String在JVM中的存储</a></p><p><a href="https://avriesl.gitee.io/2020/09/19/Java-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/">Java代理模式</a></p><p><a href="https://avriesl.gitee.io/2020/09/10/String%E7%B1%BB%E7%9A%84intern/">String中的intern方法</a></p><p><a href="https://avriesl.gitee.io/2020/09/05/Object%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95%EF%BC%9F/">Object提供了哪些方法？</a></p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="MySQL内部模块"><a href="#MySQL内部模块" class="headerlink" title="MySQL内部模块"></a>MySQL内部模块</h4><p><a href="https://avriesl.github.io/2021/08/16/MySQL-%E4%B8%80-MySQL%E5%86%85%E9%83%A8%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%90%84%E7%BB%84%E4%BB%B6%E5%8A%9F%E8%83%BD/">MySQL(一) MySQL内部架构及各组件功能</a></p><p><a href="https://avriesl.github.io/2021/08/16/MySQL-%E4%BA%8C-Select%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/">MySQL(二) Select语句执行流程</a></p><p><a href="https://avriesl.github.io/2021/08/16/MySQL-%E4%B8%89-MySQL%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/">MySQL(三) MySQL日志文件</a></p><p><a href="https://avriesl.github.io/2021/08/16/MySQL-%E5%9B%9B-InnoDB-Buffer-Pool/">MySQL(四) InnoDB Buffer Pool</a></p><p><a href="https://avriesl.github.io/2021/08/16/MySQL-%E4%BA%94-Update%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/">MySQL(五) Update语句执行流程</a></p><h4 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h4><p><a href="https://avriesl.github.io/2021/08/17/MySQL-%E5%85%AD-MySQL%E7%B4%A2%E5%BC%95/">MySQL(六) MySQL索引</a></p><p><a href="https://avriesl.github.io/2021/08/19/MySQL-%E4%B8%83-MySQL-%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/">MySQL(七) MySQL 执行计划</a></p><p><a href="https://avriesl.github.io/2021/08/19/MySQL-%E5%85%AB-MySQL-%E4%BC%98%E5%8C%96%E6%B1%87%E6%80%BB-%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/">MySQL(八) MySQL 优化汇总 （持续更新）</a></p><h4 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h4><p><a href="https://avriesl.github.io/2021/08/18/MySQL-%E4%B8%83-InnoDB%E4%BA%8B%E5%8A%A1%E7%89%B9%E6%80%A7/">MySQL(九) InnoDB事务特性</a></p><p><a href="https://avriesl.github.io/2021/08/18/MySQL-%E5%8D%81-InnoDB%E7%9A%84%E9%94%81/">MySQL(十) InnoDB的锁</a></p><p><a href="">MySQL(十一) InnoDB多版本并发控制</a></p><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><p><a href="https://avriesl.gitee.io/2020/08/30/mysql%E7%99%BD%E5%90%8D%E5%8D%95/">MySQL 白名单</a></p><p><a href="https://avriesl.gitee.io/2020/09/06/%E6%88%91%E5%AF%B9MVCC%E7%9A%84%E7%90%86%E8%A7%A3/">MVCC简单理解</a></p><p><a href="https://avriesl.gitee.io/2020/11/10/MySQL%E7%B4%A2%E5%BC%95%E5%AD%A6%E4%B9%A0/">MySQL索引学习</a></p><h3 id="JVM-了解"><a href="#JVM-了解" class="headerlink" title="JVM 了解"></a>JVM 了解</h3><h3 id="Java-并发"><a href="#Java-并发" class="headerlink" title="Java 并发"></a>Java 并发</h3><h3 id="Java-IO"><a href="#Java-IO" class="headerlink" title="Java IO"></a>Java IO</h3><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p><a href="https://avriesl.gitee.io/2020/09/25/Redis-Cluster%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/">Redis Cluster配置及使用</a></p><p><a href="https://avriesl.gitee.io/2020/09/26/MyBatis-Plus%E6%95%B4%E5%90%88redis-cluster/">MyBatis Plus整合Redis Cluster</a></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h3 id="JDK工具源码"><a href="#JDK工具源码" class="headerlink" title="JDK工具源码"></a>JDK工具源码</h3><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><p><a href="https://avriesl.gitee.io/2020/12/21/Spring-Boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/">Spring Boot启动流程</a></p><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><h3 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a>Spring Cloud Netflix</h3><h3 id="Spring-Cloud-Alibaba"><a href="#Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud Alibaba"></a>Spring Cloud Alibaba</h3><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h3 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h3><h4 id="elastic-search"><a href="#elastic-search" class="headerlink" title="elastic search"></a>elastic search</h4><p><a href="https://avriesl.gitee.io/2020/09/09/ES%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/">ES的简单使用</a></p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p><a href="https://avriesl.gitee.io/2020/09/26/nginx%E9%85%8D%E7%BD%AE/">nginx配置</a></p><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><h3 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h3><h3 id="分布式定时任务调度"><a href="#分布式定时任务调度" class="headerlink" title="分布式定时任务调度"></a>分布式定时任务调度</h3>]]></content>
      
      
      <categories>
          
          <category> all </category>
          
      </categories>
      
      
        <tags>
            
            <tag> all </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
